__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = require(_dependencyMap[0], "@firebase/util");

    var util_2 = require(_dependencyMap[1], "../util/util");

    var KeyIndex_1 = require(_dependencyMap[2], "../snap/indexes/KeyIndex");

    var PriorityIndex_1 = require(_dependencyMap[3], "../snap/indexes/PriorityIndex");

    var ValueIndex_1 = require(_dependencyMap[4], "../snap/indexes/ValueIndex");

    var PathIndex_1 = require(_dependencyMap[5], "../snap/indexes/PathIndex");

    var IndexedFilter_1 = require(_dependencyMap[6], "./filter/IndexedFilter");

    var LimitedFilter_1 = require(_dependencyMap[7], "./filter/LimitedFilter");

    var RangedFilter_1 = require(_dependencyMap[8], "./filter/RangedFilter");

    var util_3 = require(_dependencyMap[0], "@firebase/util");

    var QueryParams = function () {
        function QueryParams() {
            this.limitSet_ = false;
            this.startSet_ = false;
            this.startNameSet_ = false;
            this.endSet_ = false;
            this.endNameSet_ = false;
            this.limit_ = 0;
            this.viewFrom_ = '';
            this.indexStartValue_ = null;
            this.indexStartName_ = '';
            this.indexEndValue_ = null;
            this.indexEndName_ = '';
            this.index_ = PriorityIndex_1.PRIORITY_INDEX;
        }

        QueryParams.prototype.hasStart = function () {
            return this.startSet_;
        };

        QueryParams.prototype.isViewFromLeft = function () {
            if (this.viewFrom_ === '') {
                return this.startSet_;
            } else {
                return this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;
            }
        };

        QueryParams.prototype.getIndexStartValue = function () {
            util_1.assert(this.startSet_, 'Only valid if start has been set');
            return this.indexStartValue_;
        };

        QueryParams.prototype.getIndexStartName = function () {
            util_1.assert(this.startSet_, 'Only valid if start has been set');

            if (this.startNameSet_) {
                return this.indexStartName_;
            } else {
                return util_2.MIN_NAME;
            }
        };

        QueryParams.prototype.hasEnd = function () {
            return this.endSet_;
        };

        QueryParams.prototype.getIndexEndValue = function () {
            util_1.assert(this.endSet_, 'Only valid if end has been set');
            return this.indexEndValue_;
        };

        QueryParams.prototype.getIndexEndName = function () {
            util_1.assert(this.endSet_, 'Only valid if end has been set');

            if (this.endNameSet_) {
                return this.indexEndName_;
            } else {
                return util_2.MAX_NAME;
            }
        };

        QueryParams.prototype.hasLimit = function () {
            return this.limitSet_;
        };

        QueryParams.prototype.hasAnchoredLimit = function () {
            return this.limitSet_ && this.viewFrom_ !== '';
        };

        QueryParams.prototype.getLimit = function () {
            util_1.assert(this.limitSet_, 'Only valid if limit has been set');
            return this.limit_;
        };

        QueryParams.prototype.getIndex = function () {
            return this.index_;
        };

        QueryParams.prototype.copy_ = function () {
            var copy = new QueryParams();
            copy.limitSet_ = this.limitSet_;
            copy.limit_ = this.limit_;
            copy.startSet_ = this.startSet_;
            copy.indexStartValue_ = this.indexStartValue_;
            copy.startNameSet_ = this.startNameSet_;
            copy.indexStartName_ = this.indexStartName_;
            copy.endSet_ = this.endSet_;
            copy.indexEndValue_ = this.indexEndValue_;
            copy.endNameSet_ = this.endNameSet_;
            copy.indexEndName_ = this.indexEndName_;
            copy.index_ = this.index_;
            copy.viewFrom_ = this.viewFrom_;
            return copy;
        };

        QueryParams.prototype.limit = function (newLimit) {
            var newParams = this.copy_();
            newParams.limitSet_ = true;
            newParams.limit_ = newLimit;
            newParams.viewFrom_ = '';
            return newParams;
        };

        QueryParams.prototype.limitToFirst = function (newLimit) {
            var newParams = this.copy_();
            newParams.limitSet_ = true;
            newParams.limit_ = newLimit;
            newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;
            return newParams;
        };

        QueryParams.prototype.limitToLast = function (newLimit) {
            var newParams = this.copy_();
            newParams.limitSet_ = true;
            newParams.limit_ = newLimit;
            newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;
            return newParams;
        };

        QueryParams.prototype.startAt = function (indexValue, key) {
            var newParams = this.copy_();
            newParams.startSet_ = true;

            if (!(indexValue !== undefined)) {
                indexValue = null;
            }

            newParams.indexStartValue_ = indexValue;

            if (key != null) {
                newParams.startNameSet_ = true;
                newParams.indexStartName_ = key;
            } else {
                newParams.startNameSet_ = false;
                newParams.indexStartName_ = '';
            }

            return newParams;
        };

        QueryParams.prototype.endAt = function (indexValue, key) {
            var newParams = this.copy_();
            newParams.endSet_ = true;

            if (!(indexValue !== undefined)) {
                indexValue = null;
            }

            newParams.indexEndValue_ = indexValue;

            if (key !== undefined) {
                newParams.endNameSet_ = true;
                newParams.indexEndName_ = key;
            } else {
                newParams.endNameSet_ = false;
                newParams.indexEndName_ = '';
            }

            return newParams;
        };

        QueryParams.prototype.orderBy = function (index) {
            var newParams = this.copy_();
            newParams.index_ = index;
            return newParams;
        };

        QueryParams.prototype.getQueryObject = function () {
            var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;
            var obj = {};

            if (this.startSet_) {
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;

                if (this.startNameSet_) {
                    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;
                }
            }

            if (this.endSet_) {
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;

                if (this.endNameSet_) {
                    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;
                }
            }

            if (this.limitSet_) {
                obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;
                var viewFrom = this.viewFrom_;

                if (viewFrom === '') {
                    if (this.isViewFromLeft()) {
                        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;
                    } else {
                        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;
                    }
                }

                obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;
            }

            if (this.index_ !== PriorityIndex_1.PRIORITY_INDEX) {
                obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();
            }

            return obj;
        };

        QueryParams.prototype.loadsAllData = function () {
            return !(this.startSet_ || this.endSet_ || this.limitSet_);
        };

        QueryParams.prototype.isDefault = function () {
            return this.loadsAllData() && this.index_ == PriorityIndex_1.PRIORITY_INDEX;
        };

        QueryParams.prototype.getNodeFilter = function () {
            if (this.loadsAllData()) {
                return new IndexedFilter_1.IndexedFilter(this.getIndex());
            } else if (this.hasLimit()) {
                return new LimitedFilter_1.LimitedFilter(this);
            } else {
                return new RangedFilter_1.RangedFilter(this);
            }
        };

        QueryParams.prototype.toRestQueryStringParameters = function () {
            var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;
            var qs = {};

            if (this.isDefault()) {
                return qs;
            }

            var orderBy;

            if (this.index_ === PriorityIndex_1.PRIORITY_INDEX) {
                orderBy = REST_CONSTANTS.PRIORITY_INDEX;
            } else if (this.index_ === ValueIndex_1.VALUE_INDEX) {
                orderBy = REST_CONSTANTS.VALUE_INDEX;
            } else if (this.index_ === KeyIndex_1.KEY_INDEX) {
                orderBy = REST_CONSTANTS.KEY_INDEX;
            } else {
                util_1.assert(this.index_ instanceof PathIndex_1.PathIndex, 'Unrecognized index type!');
                orderBy = this.index_.toString();
            }

            qs[REST_CONSTANTS.ORDER_BY] = util_3.stringify(orderBy);

            if (this.startSet_) {
                qs[REST_CONSTANTS.START_AT] = util_3.stringify(this.indexStartValue_);

                if (this.startNameSet_) {
                    qs[REST_CONSTANTS.START_AT] += ',' + util_3.stringify(this.indexStartName_);
                }
            }

            if (this.endSet_) {
                qs[REST_CONSTANTS.END_AT] = util_3.stringify(this.indexEndValue_);

                if (this.endNameSet_) {
                    qs[REST_CONSTANTS.END_AT] += ',' + util_3.stringify(this.indexEndName_);
                }
            }

            if (this.limitSet_) {
                if (this.isViewFromLeft()) {
                    qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;
                } else {
                    qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;
                }
            }

            return qs;
        };

        QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {
            INDEX_START_VALUE: 'sp',
            INDEX_START_NAME: 'sn',
            INDEX_END_VALUE: 'ep',
            INDEX_END_NAME: 'en',
            LIMIT: 'l',
            VIEW_FROM: 'vf',
            VIEW_FROM_LEFT: 'l',
            VIEW_FROM_RIGHT: 'r',
            INDEX: 'i'
        };
        QueryParams.REST_QUERY_CONSTANTS_ = {
            ORDER_BY: 'orderBy',
            PRIORITY_INDEX: '$priority',
            VALUE_INDEX: '$value',
            KEY_INDEX: '$key',
            START_AT: 'startAt',
            END_AT: 'endAt',
            LIMIT_TO_FIRST: 'limitToFirst',
            LIMIT_TO_LAST: 'limitToLast'
        };
        QueryParams.DEFAULT = new QueryParams();
        return QueryParams;
    }();

    exports.QueryParams = QueryParams;
});