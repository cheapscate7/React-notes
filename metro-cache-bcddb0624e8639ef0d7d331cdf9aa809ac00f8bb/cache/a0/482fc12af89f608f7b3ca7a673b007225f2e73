__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/cheapscate7/Documents/React-notes/node_modules/react-native-paper/src/components/Card/Card.js";

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _Paper = require(_dependencyMap[3], "../Paper");

  var _Paper2 = _interopRequireDefault(_Paper);

  var _withTheme = require(_dependencyMap[4], "../../core/withTheme");

  var _withTheme2 = _interopRequireDefault(_withTheme);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Card: {
      displayName: "Card"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/cheapscate7/Documents/React-notes/node_modules/react-native-paper/src/components/Card/Card.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var AnimatedPaper = _reactNative.Animated.createAnimatedComponent(_Paper2.default);

  var Card = _wrapComponent("Card")((_temp = _class = function (_React$Component) {
    _inherits(Card, _React$Component);

    function Card(props) {
      _classCallCheck(this, Card);

      var _this = _possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).call(this, props));

      _this._handlePressIn = function () {
        _reactNative.Animated.timing(_this.state.elevation, {
          toValue: 8,
          duration: 200
        }).start();
      };

      _this._handlePressOut = function () {
        _reactNative.Animated.timing(_this.state.elevation, {
          toValue: _this.props.elevation,
          duration: 150
        }).start();
      };

      _this.state = {
        elevation: new _reactNative.Animated.Value(_this.props.elevation)
      };
      return _this;
    }

    _createClass(Card, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            children = _props.children,
            onPress = _props.onPress,
            style = _props.style,
            theme = _props.theme;
        var elevation = this.state.elevation;
        var roundness = theme.roundness;
        var total = React.Children.count(children);
        var siblings = React.Children.map(children, function (child) {
          return typeof child === 'object' && child.type ? child.type.displayName : null;
        });
        return React.createElement(
          AnimatedPaper,
          {
            style: [styles.card, {
              borderRadius: roundness,
              elevation: elevation
            }, style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 118
            }
          },
          React.createElement(
            _reactNative.TouchableWithoutFeedback,
            {
              delayPressIn: 0,
              onPress: onPress,
              onPressIn: onPress ? this._handlePressIn : undefined,
              onPressOut: onPress ? this._handlePressOut : undefined,
              style: styles.container,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 121
              }
            },
            React.createElement(
              _reactNative.View,
              {
                style: styles.innerContainer,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 128
                }
              },
              React.Children.map(children, function (child, index) {
                return typeof child === 'object' && child !== null ? React.cloneElement(child, {
                  index: index,
                  total: total,
                  siblings: siblings
                }) : child;
              })
            )
          )
        );
      }
    }]);

    return Card;
  }(React.Component), _class.defaultProps = {
    elevation: 2
  }, _temp));

  var styles = _reactNative.StyleSheet.create({
    card: {
      margin: 4
    },
    container: {
      flex: 1
    },
    innerContainer: {
      flexGrow: 1
    }
  });

  exports.default = (0, _withTheme2.default)(Card);
});