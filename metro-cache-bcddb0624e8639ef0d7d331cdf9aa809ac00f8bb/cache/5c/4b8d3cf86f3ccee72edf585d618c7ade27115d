__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  function componentWillMount() {
    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);

    if (state !== null && state !== undefined) {
      this.setState(state);
    }
  }

  function componentWillReceiveProps(nextProps) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, this.state);

    if (state !== null && state !== undefined) {
      this.setState(state);
    }
  }

  componentWillMount.__suppressDeprecationWarning = true;
  componentWillReceiveProps.__suppressDeprecationWarning = true;

  module.exports = function polyfill(Component) {
    if (!Component.prototype || !Component.prototype.isReactComponent) {
      throw new Error('Can only polyfill class components');
    }

    if (typeof Component.getDerivedStateFromProps === 'function') {
      if (typeof Component.prototype.componentWillMount === 'function') {
        throw new Error('Cannot polyfill if componentWillMount already exists');
      } else if (typeof Component.prototype.componentWillReceiveProps === 'function') {
        throw new Error('Cannot polyfill if componentWillReceiveProps already exists');
      }

      Component.prototype.componentWillMount = componentWillMount;
      Component.prototype.componentWillReceiveProps = componentWillReceiveProps;
    }

    return Component;
  };
});