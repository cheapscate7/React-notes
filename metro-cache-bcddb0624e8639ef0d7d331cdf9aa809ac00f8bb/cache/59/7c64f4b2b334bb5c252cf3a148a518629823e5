__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var Path_1 = require(_dependencyMap[0], "./util/Path");

    var PriorityIndex_1 = require(_dependencyMap[1], "./snap/indexes/PriorityIndex");

    var CountedSet_1 = require(_dependencyMap[2], "./util/CountedSet");

    var SparseSnapshotTree = function () {
        function SparseSnapshotTree() {
            this.value_ = null;
            this.children_ = null;
        }

        SparseSnapshotTree.prototype.find = function (path) {
            if (this.value_ != null) {
                return this.value_.getChild(path);
            } else if (!path.isEmpty() && this.children_ != null) {
                var childKey = path.getFront();
                path = path.popFront();

                if (this.children_.contains(childKey)) {
                    var childTree = this.children_.get(childKey);
                    return childTree.find(path);
                } else {
                    return null;
                }
            } else {
                return null;
            }
        };

        SparseSnapshotTree.prototype.remember = function (path, data) {
            if (path.isEmpty()) {
                this.value_ = data;
                this.children_ = null;
            } else if (this.value_ !== null) {
                this.value_ = this.value_.updateChild(path, data);
            } else {
                if (this.children_ == null) {
                    this.children_ = new CountedSet_1.CountedSet();
                }

                var childKey = path.getFront();

                if (!this.children_.contains(childKey)) {
                    this.children_.add(childKey, new SparseSnapshotTree());
                }

                var child = this.children_.get(childKey);
                path = path.popFront();
                child.remember(path, data);
            }
        };

        SparseSnapshotTree.prototype.forget = function (path) {
            if (path.isEmpty()) {
                this.value_ = null;
                this.children_ = null;
                return true;
            } else {
                if (this.value_ !== null) {
                    if (this.value_.isLeafNode()) {
                        return false;
                    } else {
                        var value = this.value_;
                        this.value_ = null;
                        var self_1 = this;
                        value.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, tree) {
                            self_1.remember(new Path_1.Path(key), tree);
                        });
                        return this.forget(path);
                    }
                } else if (this.children_ !== null) {
                    var childKey = path.getFront();
                    path = path.popFront();

                    if (this.children_.contains(childKey)) {
                        var safeToRemove = this.children_.get(childKey).forget(path);

                        if (safeToRemove) {
                            this.children_.remove(childKey);
                        }
                    }

                    if (this.children_.isEmpty()) {
                        this.children_ = null;
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    return true;
                }
            }
        };

        SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {
            if (this.value_ !== null) {
                func(prefixPath, this.value_);
            } else {
                this.forEachChild(function (key, tree) {
                    var path = new Path_1.Path(prefixPath.toString() + '/' + key);
                    tree.forEachTree(path, func);
                });
            }
        };

        SparseSnapshotTree.prototype.forEachChild = function (func) {
            if (this.children_ !== null) {
                this.children_.each(function (key, tree) {
                    func(key, tree);
                });
            }
        };

        return SparseSnapshotTree;
    }();

    exports.SparseSnapshotTree = SparseSnapshotTree;
});