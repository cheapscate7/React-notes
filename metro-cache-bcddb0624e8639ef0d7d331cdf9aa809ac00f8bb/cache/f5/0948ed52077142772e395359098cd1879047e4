__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var taskenums_1 = require(_dependencyMap[0], "./implementation/taskenums");

    var observer_1 = require(_dependencyMap[1], "./implementation/observer");

    var taskenums_2 = require(_dependencyMap[0], "./implementation/taskenums");

    var tasksnapshot_1 = require(_dependencyMap[2], "./tasksnapshot");

    var fbsArgs = require(_dependencyMap[3], "./implementation/args");

    var fbsArray = require(_dependencyMap[4], "./implementation/array");

    var async_1 = require(_dependencyMap[5], "./implementation/async");

    var errors = require(_dependencyMap[6], "./implementation/error");

    var fbsPromiseimpl = require(_dependencyMap[7], "./implementation/promise_external");

    var fbsRequests = require(_dependencyMap[8], "./implementation/requests");

    var fbsTaskEnums = require(_dependencyMap[0], "./implementation/taskenums");

    var typeUtils = require(_dependencyMap[9], "./implementation/type");

    var UploadTask = function () {
        function UploadTask(ref, authWrapper, location, mappings, blob, metadata) {
            if (metadata === void 0) {
                metadata = null;
            }

            var _this = this;

            this.transferred_ = 0;
            this.needToFetchStatus_ = false;
            this.needToFetchMetadata_ = false;
            this.observers_ = [];
            this.error_ = null;
            this.uploadUrl_ = null;
            this.request_ = null;
            this.chunkMultiplier_ = 1;
            this.resolve_ = null;
            this.reject_ = null;
            this.ref_ = ref;
            this.authWrapper_ = authWrapper;
            this.location_ = location;
            this.blob_ = blob;
            this.metadata_ = metadata;
            this.mappings_ = mappings;
            this.resumable_ = this.shouldDoResumable_(this.blob_);
            this.state_ = taskenums_1.InternalTaskState.RUNNING;

            this.errorHandler_ = function (error) {
                _this.request_ = null;
                _this.chunkMultiplier_ = 1;

                if (error.codeEquals(errors.Code.CANCELED)) {
                    _this.needToFetchStatus_ = true;

                    _this.completeTransitions_();
                } else {
                    _this.error_ = error;

                    _this.transition_(taskenums_1.InternalTaskState.ERROR);
                }
            };

            this.metadataErrorHandler_ = function (error) {
                _this.request_ = null;

                if (error.codeEquals(errors.Code.CANCELED)) {
                    _this.completeTransitions_();
                } else {
                    _this.error_ = error;

                    _this.transition_(taskenums_1.InternalTaskState.ERROR);
                }
            };

            this.promise_ = fbsPromiseimpl.make(function (resolve, reject) {
                _this.resolve_ = resolve;
                _this.reject_ = reject;

                _this.start_();
            });
            this.promise_.then(null, function () {});
        }

        UploadTask.prototype.makeProgressCallback_ = function () {
            var _this = this;

            var sizeBefore = this.transferred_;
            return function (loaded, total) {
                _this.updateProgress_(sizeBefore + loaded);
            };
        };

        UploadTask.prototype.shouldDoResumable_ = function (blob) {
            return blob.size() > 256 * 1024;
        };

        UploadTask.prototype.start_ = function () {
            if (this.state_ !== taskenums_1.InternalTaskState.RUNNING) {
                return;
            }

            if (this.request_ !== null) {
                return;
            }

            if (this.resumable_) {
                if (this.uploadUrl_ === null) {
                    this.createResumable_();
                } else {
                    if (this.needToFetchStatus_) {
                        this.fetchStatus_();
                    } else {
                        if (this.needToFetchMetadata_) {
                            this.fetchMetadata_();
                        } else {
                            this.continueUpload_();
                        }
                    }
                }
            } else {
                this.oneShotUpload_();
            }
        };

        UploadTask.prototype.resolveToken_ = function (callback) {
            var _this = this;

            this.authWrapper_.getAuthToken().then(function (authToken) {
                switch (_this.state_) {
                    case taskenums_1.InternalTaskState.RUNNING:
                        callback(authToken);
                        break;

                    case taskenums_1.InternalTaskState.CANCELING:
                        _this.transition_(taskenums_1.InternalTaskState.CANCELED);

                        break;

                    case taskenums_1.InternalTaskState.PAUSING:
                        _this.transition_(taskenums_1.InternalTaskState.PAUSED);

                        break;

                    default:}
            });
        };

        UploadTask.prototype.createResumable_ = function () {
            var _this = this;

            this.resolveToken_(function (authToken) {
                var requestInfo = fbsRequests.createResumableUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);

                var createRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);

                _this.request_ = createRequest;
                createRequest.getPromise().then(function (url) {
                    _this.request_ = null;
                    _this.uploadUrl_ = url;
                    _this.needToFetchStatus_ = false;

                    _this.completeTransitions_();
                }, _this.errorHandler_);
            });
        };

        UploadTask.prototype.fetchStatus_ = function () {
            var _this = this;

            var url = this.uploadUrl_;
            this.resolveToken_(function (authToken) {
                var requestInfo = fbsRequests.getResumableUploadStatus(_this.authWrapper_, _this.location_, url, _this.blob_);

                var statusRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);

                _this.request_ = statusRequest;
                statusRequest.getPromise().then(function (status) {
                    status = status;
                    _this.request_ = null;

                    _this.updateProgress_(status.current);

                    _this.needToFetchStatus_ = false;

                    if (status.finalized) {
                        _this.needToFetchMetadata_ = true;
                    }

                    _this.completeTransitions_();
                }, _this.errorHandler_);
            });
        };

        UploadTask.prototype.continueUpload_ = function () {
            var _this = this;

            var chunkSize = fbsRequests.resumableUploadChunkSize * this.chunkMultiplier_;
            var status = new fbsRequests.ResumableUploadStatus(this.transferred_, this.blob_.size());
            var url = this.uploadUrl_;
            this.resolveToken_(function (authToken) {
                var requestInfo;

                try {
                    requestInfo = fbsRequests.continueResumableUpload(_this.location_, _this.authWrapper_, url, _this.blob_, chunkSize, _this.mappings_, status, _this.makeProgressCallback_());
                } catch (e) {
                    _this.error_ = e;

                    _this.transition_(taskenums_1.InternalTaskState.ERROR);

                    return;
                }

                var uploadRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);

                _this.request_ = uploadRequest;
                uploadRequest.getPromise().then(function (newStatus) {
                    _this.increaseMultiplier_();

                    _this.request_ = null;

                    _this.updateProgress_(newStatus.current);

                    if (newStatus.finalized) {
                        _this.metadata_ = newStatus.metadata;

                        _this.transition_(taskenums_1.InternalTaskState.SUCCESS);
                    } else {
                        _this.completeTransitions_();
                    }
                }, _this.errorHandler_);
            });
        };

        UploadTask.prototype.increaseMultiplier_ = function () {
            var currentSize = fbsRequests.resumableUploadChunkSize * this.chunkMultiplier_;

            if (currentSize < 32 * 1024 * 1024) {
                this.chunkMultiplier_ *= 2;
            }
        };

        UploadTask.prototype.fetchMetadata_ = function () {
            var _this = this;

            this.resolveToken_(function (authToken) {
                var requestInfo = fbsRequests.getMetadata(_this.authWrapper_, _this.location_, _this.mappings_);

                var metadataRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);

                _this.request_ = metadataRequest;
                metadataRequest.getPromise().then(function (metadata) {
                    _this.request_ = null;
                    _this.metadata_ = metadata;

                    _this.transition_(taskenums_1.InternalTaskState.SUCCESS);
                }, _this.metadataErrorHandler_);
            });
        };

        UploadTask.prototype.oneShotUpload_ = function () {
            var _this = this;

            this.resolveToken_(function (authToken) {
                var requestInfo = fbsRequests.multipartUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);

                var multipartRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);

                _this.request_ = multipartRequest;
                multipartRequest.getPromise().then(function (metadata) {
                    _this.request_ = null;
                    _this.metadata_ = metadata;

                    _this.updateProgress_(_this.blob_.size());

                    _this.transition_(taskenums_1.InternalTaskState.SUCCESS);
                }, _this.errorHandler_);
            });
        };

        UploadTask.prototype.updateProgress_ = function (transferred) {
            var old = this.transferred_;
            this.transferred_ = transferred;

            if (this.transferred_ !== old) {
                this.notifyObservers_();
            }
        };

        UploadTask.prototype.transition_ = function (state) {
            if (this.state_ === state) {
                return;
            }

            switch (state) {
                case taskenums_1.InternalTaskState.CANCELING:
                    this.state_ = state;

                    if (this.request_ !== null) {
                        this.request_.cancel();
                    }

                    break;

                case taskenums_1.InternalTaskState.PAUSING:
                    this.state_ = state;

                    if (this.request_ !== null) {
                        this.request_.cancel();
                    }

                    break;

                case taskenums_1.InternalTaskState.RUNNING:
                    var wasPaused = this.state_ === taskenums_1.InternalTaskState.PAUSED;
                    this.state_ = state;

                    if (wasPaused) {
                        this.notifyObservers_();
                        this.start_();
                    }

                    break;

                case taskenums_1.InternalTaskState.PAUSED:
                    this.state_ = state;
                    this.notifyObservers_();
                    break;

                case taskenums_1.InternalTaskState.CANCELED:
                    this.error_ = errors.canceled();
                    this.state_ = state;
                    this.notifyObservers_();
                    break;

                case taskenums_1.InternalTaskState.ERROR:
                    this.state_ = state;
                    this.notifyObservers_();
                    break;

                case taskenums_1.InternalTaskState.SUCCESS:
                    this.state_ = state;
                    this.notifyObservers_();
                    break;
            }
        };

        UploadTask.prototype.completeTransitions_ = function () {
            switch (this.state_) {
                case taskenums_1.InternalTaskState.PAUSING:
                    this.transition_(taskenums_1.InternalTaskState.PAUSED);
                    break;

                case taskenums_1.InternalTaskState.CANCELING:
                    this.transition_(taskenums_1.InternalTaskState.CANCELED);
                    break;

                case taskenums_1.InternalTaskState.RUNNING:
                    this.start_();
                    break;

                default:
                    break;
            }
        };

        Object.defineProperty(UploadTask.prototype, "snapshot", {
            get: function get() {
                var externalState = fbsTaskEnums.taskStateFromInternalTaskState(this.state_);
                return new tasksnapshot_1.UploadTaskSnapshot(this.transferred_, this.blob_.size(), externalState, this.metadata_, this, this.ref_);
            },
            enumerable: true,
            configurable: true
        });

        UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {
            if (nextOrObserver === void 0) {
                nextOrObserver = undefined;
            }

            if (error === void 0) {
                error = undefined;
            }

            if (completed === void 0) {
                completed = undefined;
            }

            function typeValidator(_p) {
                if (type !== taskenums_2.TaskEvent.STATE_CHANGED) {
                    throw "Expected one of the event types: [" + taskenums_2.TaskEvent.STATE_CHANGED + "].";
                }
            }

            var nextOrObserverMessage = 'Expected a function or an Object with one of ' + '`next`, `error`, `complete` properties.';
            var nextValidator = fbsArgs.nullFunctionSpec(true).validator;
            var observerValidator = fbsArgs.looseObjectSpec(null, true).validator;

            function nextOrObserverValidator(p) {
                try {
                    nextValidator(p);
                    return;
                } catch (e) {}

                try {
                    observerValidator(p);
                    var anyDefined = typeUtils.isJustDef(p['next']) || typeUtils.isJustDef(p['error']) || typeUtils.isJustDef(p['complete']);

                    if (!anyDefined) {
                        throw '';
                    }

                    return;
                } catch (e) {
                    throw nextOrObserverMessage;
                }
            }

            var specs = [fbsArgs.stringSpec(typeValidator), fbsArgs.looseObjectSpec(nextOrObserverValidator, true), fbsArgs.nullFunctionSpec(true), fbsArgs.nullFunctionSpec(true)];
            fbsArgs.validate('on', specs, arguments);
            var self = this;

            function makeBinder(specs) {
                function binder(nextOrObserver, error, opt_complete) {
                    if (specs !== null) {
                        fbsArgs.validate('on', specs, arguments);
                    }

                    var observer = new observer_1.Observer(nextOrObserver, error, completed);
                    self.addObserver_(observer);
                    return function () {
                        self.removeObserver_(observer);
                    };
                }

                return binder;
            }

            function binderNextOrObserverValidator(p) {
                if (p === null) {
                    throw nextOrObserverMessage;
                }

                nextOrObserverValidator(p);
            }

            var binderSpecs = [fbsArgs.looseObjectSpec(binderNextOrObserverValidator), fbsArgs.nullFunctionSpec(true), fbsArgs.nullFunctionSpec(true)];
            var typeOnly = !(typeUtils.isJustDef(nextOrObserver) || typeUtils.isJustDef(error) || typeUtils.isJustDef(completed));

            if (typeOnly) {
                return makeBinder(binderSpecs);
            } else {
                return makeBinder(null)(nextOrObserver, error, completed);
            }
        };

        UploadTask.prototype.then = function (onFulfilled, onRejected) {
            return this.promise_.then(onFulfilled, onRejected);
        };

        UploadTask.prototype.catch = function (onRejected) {
            return this.then(null, onRejected);
        };

        UploadTask.prototype.addObserver_ = function (observer) {
            this.observers_.push(observer);
            this.notifyObserver_(observer);
        };

        UploadTask.prototype.removeObserver_ = function (observer) {
            fbsArray.remove(this.observers_, observer);
        };

        UploadTask.prototype.notifyObservers_ = function () {
            var _this = this;

            this.finishPromise_();
            var observers = fbsArray.clone(this.observers_);
            observers.forEach(function (observer) {
                _this.notifyObserver_(observer);
            });
        };

        UploadTask.prototype.finishPromise_ = function () {
            if (this.resolve_ !== null) {
                var triggered = true;

                switch (fbsTaskEnums.taskStateFromInternalTaskState(this.state_)) {
                    case taskenums_2.TaskState.SUCCESS:
                        async_1.async(this.resolve_.bind(null, this.snapshot))();
                        break;

                    case taskenums_2.TaskState.CANCELED:
                    case taskenums_2.TaskState.ERROR:
                        var toCall = this.reject_;
                        async_1.async(toCall.bind(null, this.error_))();
                        break;

                    default:
                        triggered = false;
                        break;
                }

                if (triggered) {
                    this.resolve_ = null;
                    this.reject_ = null;
                }
            }
        };

        UploadTask.prototype.notifyObserver_ = function (observer) {
            var externalState = fbsTaskEnums.taskStateFromInternalTaskState(this.state_);

            switch (externalState) {
                case taskenums_2.TaskState.RUNNING:
                case taskenums_2.TaskState.PAUSED:
                    if (observer.next !== null) {
                        async_1.async(observer.next.bind(observer, this.snapshot))();
                    }

                    break;

                case taskenums_2.TaskState.SUCCESS:
                    if (observer.complete !== null) {
                        async_1.async(observer.complete.bind(observer))();
                    }

                    break;

                case taskenums_2.TaskState.CANCELED:
                case taskenums_2.TaskState.ERROR:
                    if (observer.error !== null) {
                        async_1.async(observer.error.bind(observer, this.error_))();
                    }

                    break;

                default:
                    if (observer.error !== null) {
                        async_1.async(observer.error.bind(observer, this.error_))();
                    }

            }
        };

        UploadTask.prototype.resume = function () {
            fbsArgs.validate('resume', [], arguments);
            var valid = this.state_ === taskenums_1.InternalTaskState.PAUSED || this.state_ === taskenums_1.InternalTaskState.PAUSING;

            if (valid) {
                this.transition_(taskenums_1.InternalTaskState.RUNNING);
            }

            return valid;
        };

        UploadTask.prototype.pause = function () {
            fbsArgs.validate('pause', [], arguments);
            var valid = this.state_ === taskenums_1.InternalTaskState.RUNNING;

            if (valid) {
                this.transition_(taskenums_1.InternalTaskState.PAUSING);
            }

            return valid;
        };

        UploadTask.prototype.cancel = function () {
            fbsArgs.validate('cancel', [], arguments);
            var valid = this.state_ === taskenums_1.InternalTaskState.RUNNING || this.state_ === taskenums_1.InternalTaskState.PAUSING;

            if (valid) {
                this.transition_(taskenums_1.InternalTaskState.CANCELING);
            }

            return valid;
        };

        return UploadTask;
    }();

    exports.UploadTask = UploadTask;
});