__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = require(_dependencyMap[0], "@firebase/util");

    var Change_1 = require(_dependencyMap[1], "./Change");

    var util_2 = require(_dependencyMap[0], "@firebase/util");

    var ChildChangeAccumulator = function () {
        function ChildChangeAccumulator() {
            this.changeMap_ = {};
        }

        ChildChangeAccumulator.prototype.trackChildChange = function (change) {
            var type = change.type;
            var childKey = change.childName;
            util_2.assert(type == Change_1.Change.CHILD_ADDED || type == Change_1.Change.CHILD_CHANGED || type == Change_1.Change.CHILD_REMOVED, 'Only child changes supported for tracking');
            util_2.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');
            var oldChange = util_1.safeGet(this.changeMap_, childKey);

            if (oldChange) {
                var oldType = oldChange.type;

                if (type == Change_1.Change.CHILD_ADDED && oldType == Change_1.Change.CHILD_REMOVED) {
                    this.changeMap_[childKey] = Change_1.Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);
                } else if (type == Change_1.Change.CHILD_REMOVED && oldType == Change_1.Change.CHILD_ADDED) {
                    delete this.changeMap_[childKey];
                } else if (type == Change_1.Change.CHILD_REMOVED && oldType == Change_1.Change.CHILD_CHANGED) {
                    this.changeMap_[childKey] = Change_1.Change.childRemovedChange(childKey, oldChange.oldSnap);
                } else if (type == Change_1.Change.CHILD_CHANGED && oldType == Change_1.Change.CHILD_ADDED) {
                    this.changeMap_[childKey] = Change_1.Change.childAddedChange(childKey, change.snapshotNode);
                } else if (type == Change_1.Change.CHILD_CHANGED && oldType == Change_1.Change.CHILD_CHANGED) {
                    this.changeMap_[childKey] = Change_1.Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);
                } else {
                    throw util_2.assertionError('Illegal combination of changes: ' + change + ' occurred after ' + oldChange);
                }
            } else {
                this.changeMap_[childKey] = change;
            }
        };

        ChildChangeAccumulator.prototype.getChanges = function () {
            return util_1.getValues(this.changeMap_);
        };

        return ChildChangeAccumulator;
    }();

    exports.ChildChangeAccumulator = ChildChangeAccumulator;
});