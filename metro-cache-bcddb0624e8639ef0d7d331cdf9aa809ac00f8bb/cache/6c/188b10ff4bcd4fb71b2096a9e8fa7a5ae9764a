__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var stringToByteArray = function stringToByteArray(str) {
        var out = [],
            p = 0;

        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);

            if (c < 128) {
                out[p++] = c;
            } else if (c < 2048) {
                out[p++] = c >> 6 | 192;
                out[p++] = c & 63 | 128;
            } else if ((c & 0xfc00) == 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) == 0xdc00) {
                c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
                out[p++] = c >> 18 | 240;
                out[p++] = c >> 12 & 63 | 128;
                out[p++] = c >> 6 & 63 | 128;
                out[p++] = c & 63 | 128;
            } else {
                out[p++] = c >> 12 | 224;
                out[p++] = c >> 6 & 63 | 128;
                out[p++] = c & 63 | 128;
            }
        }

        return out;
    };

    var byteArrayToString = function byteArrayToString(bytes) {
        var out = [],
            pos = 0,
            c = 0;

        while (pos < bytes.length) {
            var c1 = bytes[pos++];

            if (c1 < 128) {
                out[c++] = String.fromCharCode(c1);
            } else if (c1 > 191 && c1 < 224) {
                var c2 = bytes[pos++];
                out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
            } else if (c1 > 239 && c1 < 365) {
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                var c4 = bytes[pos++];
                var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
                out[c++] = String.fromCharCode(0xd800 + (u >> 10));
                out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
            } else {
                var c2 = bytes[pos++];
                var c3 = bytes[pos++];
                out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
            }
        }

        return out.join('');
    };

    exports.base64 = {
        byteToCharMap_: null,
        charToByteMap_: null,
        byteToCharMapWebSafe_: null,
        charToByteMapWebSafe_: null,
        ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',

        get ENCODED_VALS() {
            return this.ENCODED_VALS_BASE + '+/=';
        },

        get ENCODED_VALS_WEBSAFE() {
            return this.ENCODED_VALS_BASE + '-_.';
        },

        HAS_NATIVE_SUPPORT: typeof atob === 'function',
        encodeByteArray: function encodeByteArray(input, opt_webSafe) {
            if (!Array.isArray(input)) {
                throw Error('encodeByteArray takes an array as a parameter');
            }

            this.init_();
            var byteToCharMap = opt_webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
            var output = [];

            for (var i = 0; i < input.length; i += 3) {
                var byte1 = input[i];
                var haveByte2 = i + 1 < input.length;
                var byte2 = haveByte2 ? input[i + 1] : 0;
                var haveByte3 = i + 2 < input.length;
                var byte3 = haveByte3 ? input[i + 2] : 0;
                var outByte1 = byte1 >> 2;
                var outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;
                var outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;
                var outByte4 = byte3 & 0x3f;

                if (!haveByte3) {
                    outByte4 = 64;

                    if (!haveByte2) {
                        outByte3 = 64;
                    }
                }

                output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
            }

            return output.join('');
        },
        encodeString: function encodeString(input, opt_webSafe) {
            if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {
                return btoa(input);
            }

            return this.encodeByteArray(stringToByteArray(input), opt_webSafe);
        },
        decodeString: function decodeString(input, opt_webSafe) {
            if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {
                return atob(input);
            }

            return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));
        },
        decodeStringToByteArray: function decodeStringToByteArray(input, opt_webSafe) {
            this.init_();
            var charToByteMap = opt_webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
            var output = [];

            for (var i = 0; i < input.length;) {
                var byte1 = charToByteMap[input.charAt(i++)];
                var haveByte2 = i < input.length;
                var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
                ++i;
                var haveByte3 = i < input.length;
                var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
                ++i;
                var haveByte4 = i < input.length;
                var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
                ++i;

                if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                    throw Error();
                }

                var outByte1 = byte1 << 2 | byte2 >> 4;
                output.push(outByte1);

                if (byte3 != 64) {
                    var outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;
                    output.push(outByte2);

                    if (byte4 != 64) {
                        var outByte3 = byte3 << 6 & 0xc0 | byte4;
                        output.push(outByte3);
                    }
                }
            }

            return output;
        },
        init_: function init_() {
            if (!this.byteToCharMap_) {
                this.byteToCharMap_ = {};
                this.charToByteMap_ = {};
                this.byteToCharMapWebSafe_ = {};
                this.charToByteMapWebSafe_ = {};

                for (var i = 0; i < this.ENCODED_VALS.length; i++) {
                    this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                    this.charToByteMap_[this.byteToCharMap_[i]] = i;
                    this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                    this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;

                    if (i >= this.ENCODED_VALS_BASE.length) {
                        this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                        this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                    }
                }
            }
        }
    };

    exports.base64Encode = function (str) {
        var utf8Bytes = stringToByteArray(str);
        return exports.base64.encodeByteArray(utf8Bytes, true);
    };

    exports.base64Decode = function (str) {
        try {
            return exports.base64.decodeString(str, true);
        } catch (e) {
            console.error('base64Decode failed: ', e);
        }

        return null;
    };
});