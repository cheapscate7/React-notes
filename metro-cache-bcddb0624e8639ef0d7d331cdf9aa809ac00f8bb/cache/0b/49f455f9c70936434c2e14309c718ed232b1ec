__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/cheapscate7/Documents/React-notes/node_modules/react-native-paper/src/components/Portal/PortalManager.js";

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = require(_dependencyMap[2], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    PortalManager: {
      displayName: "PortalManager"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/cheapscate7/Documents/React-notes/node_modules/react-native-paper/src/components/Portal/PortalManager.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var PortalManager = _wrapComponent("PortalManager")(function (_React$PureComponent) {
    _inherits(PortalManager, _React$PureComponent);

    function PortalManager() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, PortalManager);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PortalManager.__proto__ || Object.getPrototypeOf(PortalManager)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        portals: []
      }, _this.mount = function (key, props) {
        _this.setState(function (state) {
          return {
            portals: [].concat(_toConsumableArray(state.portals), [{
              key: key,
              props: props
            }])
          };
        });
      }, _this.update = function (key, props) {
        return _this.setState(function (state) {
          return {
            portals: state.portals.map(function (item) {
              if (item.key === key) {
                return _extends({}, item, {
                  props: props
                });
              }

              return item;
            })
          };
        });
      }, _this.unmount = function (key) {
        return _this.setState(function (state) {
          return {
            portals: state.portals.filter(function (item) {
              return item.key !== key;
            })
          };
        });
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(PortalManager, [{
      key: "render",
      value: function render() {
        return this.state.portals.reduce(function (acc, curr) {
          var _curr$props = curr.props,
              _curr$props$position = _curr$props.position,
              position = _curr$props$position === undefined ? 0 : _curr$props$position,
              children = _curr$props.children;
          var group = acc.find(function (it) {
            return it.position === position;
          });

          if (group) {
            group = {
              position: position,
              items: group.items.concat([children])
            };
            return acc.map(function (g) {
              if (group && g.position === position) {
                return group;
              }

              return g;
            });
          }

          group = {
            position: position,
            items: [children]
          };
          return [].concat(_toConsumableArray(acc), [group]);
        }, []).map(function (_ref2) {
          var position = _ref2.position,
              items = _ref2.items;
          return React.createElement(
            _reactNative.View,
            {
              key: position,
              pointerEvents: "box-none",
              style: _reactNative.StyleSheet.absoluteFill,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 64
              }
            },
            items
          );
        });
      }
    }]);

    return PortalManager;
  }(React.PureComponent));

  exports.default = PortalManager;
});