__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = require(_dependencyMap[0], "../core/util/util");

    var storage_1 = require(_dependencyMap[1], "../core/storage/storage");

    var Constants_1 = require(_dependencyMap[2], "./Constants");

    var TransportManager_1 = require(_dependencyMap[3], "./TransportManager");

    var UPGRADE_TIMEOUT = 60000;
    var DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;
    var BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
    var BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
    var MESSAGE_TYPE = 't';
    var MESSAGE_DATA = 'd';
    var CONTROL_SHUTDOWN = 's';
    var CONTROL_RESET = 'r';
    var CONTROL_ERROR = 'e';
    var CONTROL_PONG = 'o';
    var SWITCH_ACK = 'a';
    var END_TRANSMISSION = 'n';
    var PING = 'p';
    var SERVER_HELLO = 'h';

    var Connection = function () {
        function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
            this.id = id;
            this.repoInfo_ = repoInfo_;
            this.onMessage_ = onMessage_;
            this.onReady_ = onReady_;
            this.onDisconnect_ = onDisconnect_;
            this.onKill_ = onKill_;
            this.lastSessionId = lastSessionId;
            this.connectionCount = 0;
            this.pendingDataMessages = [];
            this.state_ = 0;
            this.log_ = util_1.logWrapper('c:' + this.id + ':');
            this.transportManager_ = new TransportManager_1.TransportManager(repoInfo_);
            this.log_('Connection created');
            this.start_();
        }

        Connection.prototype.start_ = function () {
            var _this = this;

            var conn = this.transportManager_.initialTransport();
            this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);
            this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
            var onMessageReceived = this.connReceiver_(this.conn_);
            var onConnectionLost = this.disconnReceiver_(this.conn_);
            this.tx_ = this.conn_;
            this.rx_ = this.conn_;
            this.secondaryConn_ = null;
            this.isHealthy_ = false;
            setTimeout(function () {
                _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);
            }, Math.floor(0));
            var healthyTimeout_ms = conn['healthyTimeout'] || 0;

            if (healthyTimeout_ms > 0) {
                this.healthyTimeout_ = util_1.setTimeoutNonBlocking(function () {
                    _this.healthyTimeout_ = null;

                    if (!_this.isHealthy_) {
                        if (_this.conn_ && _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
                            _this.log_('Connection exceeded healthy timeout but has received ' + _this.conn_.bytesReceived + ' bytes.  Marking connection healthy.');

                            _this.isHealthy_ = true;

                            _this.conn_.markConnectionHealthy();
                        } else if (_this.conn_ && _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
                            _this.log_('Connection exceeded healthy timeout but has sent ' + _this.conn_.bytesSent + ' bytes.  Leaving connection alive.');
                        } else {
                            _this.log_('Closing unhealthy connection after timeout.');

                            _this.close();
                        }
                    }
                }, Math.floor(healthyTimeout_ms));
            }
        };

        Connection.prototype.nextTransportId_ = function () {
            return 'c:' + this.id + ':' + this.connectionCount++;
        };

        Connection.prototype.disconnReceiver_ = function (conn) {
            var _this = this;

            return function (everConnected) {
                if (conn === _this.conn_) {
                    _this.onConnectionLost_(everConnected);
                } else if (conn === _this.secondaryConn_) {
                    _this.log_('Secondary connection lost.');

                    _this.onSecondaryConnectionLost_();
                } else {
                    _this.log_('closing an old connection');
                }
            };
        };

        Connection.prototype.connReceiver_ = function (conn) {
            var _this = this;

            return function (message) {
                if (_this.state_ != 2) {
                        if (conn === _this.rx_) {
                            _this.onPrimaryMessageReceived_(message);
                        } else if (conn === _this.secondaryConn_) {
                            _this.onSecondaryMessageReceived_(message);
                        } else {
                            _this.log_('message on old connection');
                        }
                    }
            };
        };

        Connection.prototype.sendRequest = function (dataMsg) {
            var msg = {
                t: 'd',
                d: dataMsg
            };
            this.sendData_(msg);
        };

        Connection.prototype.tryCleanupConnection = function () {
            if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
                this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);
                this.conn_ = this.secondaryConn_;
                this.secondaryConn_ = null;
            }
        };

        Connection.prototype.onSecondaryControl_ = function (controlData) {
            if (MESSAGE_TYPE in controlData) {
                var cmd = controlData[MESSAGE_TYPE];

                if (cmd === SWITCH_ACK) {
                    this.upgradeIfSecondaryHealthy_();
                } else if (cmd === CONTROL_RESET) {
                    this.log_('Got a reset on secondary, closing it');
                    this.secondaryConn_.close();

                    if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {
                        this.close();
                    }
                } else if (cmd === CONTROL_PONG) {
                    this.log_('got pong on secondary.');
                    this.secondaryResponsesRequired_--;
                    this.upgradeIfSecondaryHealthy_();
                }
            }
        };

        Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {
            var layer = util_1.requireKey('t', parsedData);
            var data = util_1.requireKey('d', parsedData);

            if (layer == 'c') {
                this.onSecondaryControl_(data);
            } else if (layer == 'd') {
                this.pendingDataMessages.push(data);
            } else {
                throw new Error('Unknown protocol layer: ' + layer);
            }
        };

        Connection.prototype.upgradeIfSecondaryHealthy_ = function () {
            if (this.secondaryResponsesRequired_ <= 0) {
                this.log_('Secondary connection is healthy.');
                this.isHealthy_ = true;
                this.secondaryConn_.markConnectionHealthy();
                this.proceedWithUpgrade_();
            } else {
                this.log_('sending ping on secondary.');
                this.secondaryConn_.send({
                    t: 'c',
                    d: {
                        t: PING,
                        d: {}
                    }
                });
            }
        };

        Connection.prototype.proceedWithUpgrade_ = function () {
            this.secondaryConn_.start();
            this.log_('sending client ack on secondary');
            this.secondaryConn_.send({
                t: 'c',
                d: {
                    t: SWITCH_ACK,
                    d: {}
                }
            });
            this.log_('Ending transmission on primary');
            this.conn_.send({
                t: 'c',
                d: {
                    t: END_TRANSMISSION,
                    d: {}
                }
            });
            this.tx_ = this.secondaryConn_;
            this.tryCleanupConnection();
        };

        Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {
            var layer = util_1.requireKey('t', parsedData);
            var data = util_1.requireKey('d', parsedData);

            if (layer == 'c') {
                this.onControl_(data);
            } else if (layer == 'd') {
                this.onDataMessage_(data);
            }
        };

        Connection.prototype.onDataMessage_ = function (message) {
            this.onPrimaryResponse_();
            this.onMessage_(message);
        };

        Connection.prototype.onPrimaryResponse_ = function () {
            if (!this.isHealthy_) {
                this.primaryResponsesRequired_--;

                if (this.primaryResponsesRequired_ <= 0) {
                    this.log_('Primary connection is healthy.');
                    this.isHealthy_ = true;
                    this.conn_.markConnectionHealthy();
                }
            }
        };

        Connection.prototype.onControl_ = function (controlData) {
            var cmd = util_1.requireKey(MESSAGE_TYPE, controlData);

            if (MESSAGE_DATA in controlData) {
                var payload = controlData[MESSAGE_DATA];

                if (cmd === SERVER_HELLO) {
                    this.onHandshake_(payload);
                } else if (cmd === END_TRANSMISSION) {
                    this.log_('recvd end transmission on primary');
                    this.rx_ = this.secondaryConn_;

                    for (var i = 0; i < this.pendingDataMessages.length; ++i) {
                        this.onDataMessage_(this.pendingDataMessages[i]);
                    }

                    this.pendingDataMessages = [];
                    this.tryCleanupConnection();
                } else if (cmd === CONTROL_SHUTDOWN) {
                    this.onConnectionShutdown_(payload);
                } else if (cmd === CONTROL_RESET) {
                    this.onReset_(payload);
                } else if (cmd === CONTROL_ERROR) {
                    util_1.error('Server Error: ' + payload);
                } else if (cmd === CONTROL_PONG) {
                    this.log_('got pong on primary.');
                    this.onPrimaryResponse_();
                    this.sendPingOnPrimaryIfNecessary_();
                } else {
                    util_1.error('Unknown control packet command: ' + cmd);
                }
            }
        };

        Connection.prototype.onHandshake_ = function (handshake) {
            var timestamp = handshake.ts;
            var version = handshake.v;
            var host = handshake.h;
            this.sessionId = handshake.s;
            this.repoInfo_.updateHost(host);

            if (this.state_ == 0) {
                    this.conn_.start();
                    this.onConnectionEstablished_(this.conn_, timestamp);

                    if (Constants_1.PROTOCOL_VERSION !== version) {
                        util_1.warn('Protocol version mismatch detected');
                    }

                    this.tryStartUpgrade_();
                }
        };

        Connection.prototype.tryStartUpgrade_ = function () {
            var conn = this.transportManager_.upgradeTransport();

            if (conn) {
                this.startUpgrade_(conn);
            }
        };

        Connection.prototype.startUpgrade_ = function (conn) {
            var _this = this;

            this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);
            this.secondaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;
            var onMessage = this.connReceiver_(this.secondaryConn_);
            var onDisconnect = this.disconnReceiver_(this.secondaryConn_);
            this.secondaryConn_.open(onMessage, onDisconnect);
            util_1.setTimeoutNonBlocking(function () {
                if (_this.secondaryConn_) {
                    _this.log_('Timed out trying to upgrade.');

                    _this.secondaryConn_.close();
                }
            }, Math.floor(UPGRADE_TIMEOUT));
        };

        Connection.prototype.onReset_ = function (host) {
            this.log_('Reset packet received.  New host: ' + host);
            this.repoInfo_.updateHost(host);

            if (this.state_ === 1) {
                    this.close();
                } else {
                this.closeConnections_();
                this.start_();
            }
        };

        Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {
            var _this = this;

            this.log_('Realtime connection established.');
            this.conn_ = conn;
            this.state_ = 1;

            if (this.onReady_) {
                this.onReady_(timestamp, this.sessionId);
                this.onReady_ = null;
            }

            if (this.primaryResponsesRequired_ === 0) {
                this.log_('Primary connection is healthy.');
                this.isHealthy_ = true;
            } else {
                util_1.setTimeoutNonBlocking(function () {
                    _this.sendPingOnPrimaryIfNecessary_();
                }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
            }
        };

        Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {
            if (!this.isHealthy_ && this.state_ === 1) {
                    this.log_('sending ping on primary.');
                    this.sendData_({
                        t: 'c',
                        d: {
                            t: PING,
                            d: {}
                        }
                    });
                }
        };

        Connection.prototype.onSecondaryConnectionLost_ = function () {
            var conn = this.secondaryConn_;
            this.secondaryConn_ = null;

            if (this.tx_ === conn || this.rx_ === conn) {
                this.close();
            }
        };

        Connection.prototype.onConnectionLost_ = function (everConnected) {
            this.conn_ = null;

            if (!everConnected && this.state_ === 0) {
                    this.log_('Realtime connection failed.');

                    if (this.repoInfo_.isCacheableHost()) {
                        storage_1.PersistentStorage.remove('host:' + this.repoInfo_.host);
                        this.repoInfo_.internalHost = this.repoInfo_.host;
                    }
                } else if (this.state_ === 1) {
                    this.log_('Realtime connection lost.');
                }

            this.close();
        };

        Connection.prototype.onConnectionShutdown_ = function (reason) {
            this.log_('Connection shutdown command received. Shutting down...');

            if (this.onKill_) {
                this.onKill_(reason);
                this.onKill_ = null;
            }

            this.onDisconnect_ = null;
            this.close();
        };

        Connection.prototype.sendData_ = function (data) {
            if (this.state_ !== 1) {
                    throw 'Connection is not connected';
                } else {
                this.tx_.send(data);
            }
        };

        Connection.prototype.close = function () {
            if (this.state_ !== 2) {
                    this.log_('Closing realtime connection.');
                    this.state_ = 2;
                    this.closeConnections_();

                    if (this.onDisconnect_) {
                        this.onDisconnect_();
                        this.onDisconnect_ = null;
                    }
                }
        };

        Connection.prototype.closeConnections_ = function () {
            this.log_('Shutting down all connections');

            if (this.conn_) {
                this.conn_.close();
                this.conn_ = null;
            }

            if (this.secondaryConn_) {
                this.secondaryConn_.close();
                this.secondaryConn_ = null;
            }

            if (this.healthyTimeout_) {
                clearTimeout(this.healthyTimeout_);
                this.healthyTimeout_ = null;
            }
        };

        return Connection;
    }();

    exports.Connection = Connection;
});