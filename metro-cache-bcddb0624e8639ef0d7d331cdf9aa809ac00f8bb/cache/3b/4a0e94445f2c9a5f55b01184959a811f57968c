__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    var ERROR_NAME = 'FirebaseError';
    var captureStackTrace = Error.captureStackTrace;

    function patchCapture(captureFake) {
        var result = captureStackTrace;
        captureStackTrace = captureFake;
        return result;
    }

    exports.patchCapture = patchCapture;

    var FirebaseError = function () {
        function FirebaseError(code, message) {
            this.code = code;
            this.message = message;
            var stack;

            if (captureStackTrace) {
                captureStackTrace(this, ErrorFactory.prototype.create);
            } else {
                var err_1 = Error.apply(this, arguments);
                this.name = ERROR_NAME;
                Object.defineProperty(this, 'stack', {
                    get: function get() {
                        return err_1.stack;
                    }
                });
            }
        }

        return FirebaseError;
    }();

    exports.FirebaseError = FirebaseError;
    FirebaseError.prototype = Object.create(Error.prototype);
    FirebaseError.prototype.constructor = FirebaseError;
    FirebaseError.prototype.name = ERROR_NAME;

    var ErrorFactory = function () {
        function ErrorFactory(service, serviceName, errors) {
            this.service = service;
            this.serviceName = serviceName;
            this.errors = errors;
            this.pattern = /\{\$([^}]+)}/g;
        }

        ErrorFactory.prototype.create = function (code, data) {
            if (data === undefined) {
                data = {};
            }

            var template = this.errors[code];
            var fullCode = this.service + '/' + code;
            var message;

            if (template === undefined) {
                message = 'Error';
            } else {
                message = template.replace(this.pattern, function (match, key) {
                    var value = data[key];
                    return value !== undefined ? value.toString() : '<' + key + '?>';
                });
            }

            message = this.serviceName + ': ' + message + ' (' + fullCode + ').';
            var err = new FirebaseError(fullCode, message);

            for (var prop in data) {
                if (!data.hasOwnProperty(prop) || prop.slice(-1) === '_') {
                    continue;
                }

                err[prop] = data[prop];
            }

            return err;
        };

        return ErrorFactory;
    }();

    exports.ErrorFactory = ErrorFactory;
});