__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/cheapscate7/Documents/React-notes/node_modules/react-native-paper/src/components/Toolbar/Toolbar.js";

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _color = require(_dependencyMap[3], "color");

  var _color2 = _interopRequireDefault(_color);

  var _withTheme = require(_dependencyMap[4], "../../core/withTheme");

  var _withTheme2 = _interopRequireDefault(_withTheme);

  var _ToolbarContent = require(_dependencyMap[5], "./ToolbarContent");

  var _ToolbarContent2 = _interopRequireDefault(_ToolbarContent);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Toolbar: {
      displayName: "Toolbar"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/cheapscate7/Documents/React-notes/node_modules/react-native-paper/src/components/Toolbar/Toolbar.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var DEFAULT_TOOLBAR_HEIGHT = 56;

  var Toolbar = _wrapComponent("Toolbar")((_temp = _class = function (_React$Component) {
    _inherits(Toolbar, _React$Component);

    function Toolbar() {
      _classCallCheck(this, Toolbar);

      return _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).apply(this, arguments));
    }

    _createClass(Toolbar, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            _props$statusBarHeigh = _props.statusBarHeight,
            statusBarHeight = _props$statusBarHeigh === undefined ? 0 : _props$statusBarHeigh,
            children = _props.children,
            dark = _props.dark,
            style = _props.style,
            theme = _props.theme,
            rest = _objectWithoutProperties(_props, ["statusBarHeight", "children", "dark", "style", "theme"]);

        var colors = theme.colors;

        var _ref = _reactNative.StyleSheet.flatten(style) || {},
            _ref$height = _ref.height,
            height = _ref$height === undefined ? DEFAULT_TOOLBAR_HEIGHT : _ref$height,
            _ref$backgroundColor = _ref.backgroundColor,
            backgroundColor = _ref$backgroundColor === undefined ? colors.primary : _ref$backgroundColor,
            restStyle = _objectWithoutProperties(_ref, ["height", "backgroundColor"]);

        var isDark = void 0;

        if (typeof dark === 'boolean') {
          isDark = dark;
        } else {
          isDark = backgroundColor === 'transparent' ? false : !(0, _color2.default)(backgroundColor).light();
        }

        var childrenArray = React.Children.toArray(children);
        var isToolbarContentFound = false;
        var leftActions = 0;
        var rightActions = 0;

        if (_reactNative.Platform.OS === 'ios') {
          childrenArray.forEach(function (child) {
            if (!isToolbarContentFound && child.type !== _ToolbarContent2.default) {
              leftActions++;
            } else if (child.type === _ToolbarContent2.default) {
              isToolbarContentFound = true;
            } else {
              rightActions++;
            }
          });
        }

        var centerIos = _reactNative.Platform.OS === 'ios' && leftActions < 2 && rightActions < 2;

        if (centerIos && leftActions === 0) {
          childrenArray.unshift(React.createElement(_reactNative.View, {
            key: "left-empty-icon",
            style: styles.emptyIcon,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 139
            }
          }));
        }

        if (centerIos && rightActions === 0) {
          childrenArray.push(React.createElement(_reactNative.View, {
            key: "right-empty-icon",
            style: styles.emptyIcon,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 145
            }
          }));
        }

        var Wrapper = typeof this.props.statusBarHeight === 'number' ? _reactNative.View : _reactNative.SafeAreaView;
        return React.createElement(
          Wrapper,
          _extends({
            style: [{
              backgroundColor: backgroundColor
            }, styles.toolbar, restStyle]
          }, rest, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 154
            }
          }),
          React.createElement(
            _reactNative.View,
            {
              style: [{
                height: height + statusBarHeight,
                paddingTop: statusBarHeight
              }, styles.wrapper],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 158
              }
            },
            childrenArray.filter(Boolean).map(function (child, i) {
              var props = {
                dark: typeof child.props.dark === 'undefined' ? isDark : child.props.dark
              };

              if (child.type === _ToolbarContent2.default) {
                props.style = [{
                  marginHorizontal: i === 0 ? 0 : 8
                }, centerIos && {
                  alignItems: 'center'
                }, child.props.style];
              }

              return React.cloneElement(child, props);
            })
          )
        );
      }
    }]);

    return Toolbar;
  }(React.Component), _class.defaultProps = {
    statusBarHeight: _reactNative.Platform.OS === 'android' && global.__expo && global.__expo.Constants ? global.__expo.Constants.statusBarHeight : undefined
  }, _temp));

  var styles = _reactNative.StyleSheet.create({
    toolbar: {
      elevation: 4
    },
    wrapper: {
      flexDirection: 'row',
      alignItems: 'center',
      paddingHorizontal: 4
    },
    emptyIcon: {
      height: 36,
      width: 36,
      marginHorizontal: 6
    }
  });

  exports.default = (0, _withTheme2.default)(Toolbar);
});