__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var IndexedFilter_1 = require(_dependencyMap[0], "./filter/IndexedFilter");

    var ViewProcessor_1 = require(_dependencyMap[1], "./ViewProcessor");

    var ChildrenNode_1 = require(_dependencyMap[2], "../snap/ChildrenNode");

    var CacheNode_1 = require(_dependencyMap[3], "./CacheNode");

    var ViewCache_1 = require(_dependencyMap[4], "./ViewCache");

    var EventGenerator_1 = require(_dependencyMap[5], "./EventGenerator");

    var util_1 = require(_dependencyMap[6], "@firebase/util");

    var Operation_1 = require(_dependencyMap[7], "../operation/Operation");

    var Change_1 = require(_dependencyMap[8], "./Change");

    var PriorityIndex_1 = require(_dependencyMap[9], "../snap/indexes/PriorityIndex");

    var View = function () {
        function View(query_, initialViewCache) {
            this.query_ = query_;
            this.eventRegistrations_ = [];
            var params = this.query_.getQueryParams();
            var indexFilter = new IndexedFilter_1.IndexedFilter(params.getIndex());
            var filter = params.getNodeFilter();
            this.processor_ = new ViewProcessor_1.ViewProcessor(filter);
            var initialServerCache = initialViewCache.getServerCache();
            var initialEventCache = initialViewCache.getEventCache();
            var serverSnap = indexFilter.updateFullNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
            var eventSnap = filter.updateFullNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
            var newServerCache = new CacheNode_1.CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
            var newEventCache = new CacheNode_1.CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
            this.viewCache_ = new ViewCache_1.ViewCache(newEventCache, newServerCache);
            this.eventGenerator_ = new EventGenerator_1.EventGenerator(this.query_);
        }

        View.prototype.getQuery = function () {
            return this.query_;
        };

        View.prototype.getServerCache = function () {
            return this.viewCache_.getServerCache().getNode();
        };

        View.prototype.getCompleteServerCache = function (path) {
            var cache = this.viewCache_.getCompleteServerSnap();

            if (cache) {
                if (this.query_.getQueryParams().loadsAllData() || !path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty()) {
                    return cache.getChild(path);
                }
            }

            return null;
        };

        View.prototype.isEmpty = function () {
            return this.eventRegistrations_.length === 0;
        };

        View.prototype.addEventRegistration = function (eventRegistration) {
            this.eventRegistrations_.push(eventRegistration);
        };

        View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {
            var cancelEvents = [];

            if (cancelError) {
                util_1.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');
                var path_1 = this.query_.path;
                this.eventRegistrations_.forEach(function (registration) {
                    cancelError = cancelError;
                    var maybeEvent = registration.createCancelEvent(cancelError, path_1);

                    if (maybeEvent) {
                        cancelEvents.push(maybeEvent);
                    }
                });
            }

            if (eventRegistration) {
                var remaining = [];

                for (var i = 0; i < this.eventRegistrations_.length; ++i) {
                    var existing = this.eventRegistrations_[i];

                    if (!existing.matches(eventRegistration)) {
                        remaining.push(existing);
                    } else if (eventRegistration.hasAnyCallback()) {
                        remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));
                        break;
                    }
                }

                this.eventRegistrations_ = remaining;
            } else {
                this.eventRegistrations_ = [];
            }

            return cancelEvents;
        };

        View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {
            if (operation.type === Operation_1.OperationType.MERGE && operation.source.queryId !== null) {
                util_1.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');
                util_1.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');
            }

            var oldViewCache = this.viewCache_;
            var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);
            this.processor_.assertIndexed(result.viewCache);
            util_1.assert(result.viewCache.getServerCache().isFullyInitialized() || !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');
            this.viewCache_ = result.viewCache;
            return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);
        };

        View.prototype.getInitialEvents = function (registration) {
            var eventSnap = this.viewCache_.getEventCache();
            var initialChanges = [];

            if (!eventSnap.getNode().isLeafNode()) {
                var eventNode = eventSnap.getNode();
                eventNode.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {
                    initialChanges.push(Change_1.Change.childAddedChange(key, childNode));
                });
            }

            if (eventSnap.isFullyInitialized()) {
                initialChanges.push(Change_1.Change.valueChange(eventSnap.getNode()));
            }

            return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);
        };

        View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {
            var registrations = eventRegistration ? [eventRegistration] : this.eventRegistrations_;
            return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);
        };

        return View;
    }();

    exports.View = View;
});