__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = require(_dependencyMap[0], "@firebase/util");

    var childSet_1 = require(_dependencyMap[1], "./childSet");

    var util_2 = require(_dependencyMap[0], "@firebase/util");

    var Node_1 = require(_dependencyMap[2], "./Node");

    var PriorityIndex_1 = require(_dependencyMap[3], "./indexes/PriorityIndex");

    var KeyIndex_1 = require(_dependencyMap[4], "./indexes/KeyIndex");

    var _defaultIndexMap;

    var fallbackObject = {};

    var IndexMap = function () {
        function IndexMap(indexes_, indexSet_) {
            this.indexes_ = indexes_;
            this.indexSet_ = indexSet_;
        }

        Object.defineProperty(IndexMap, "Default", {
            get: function get() {
                util_1.assert(fallbackObject && PriorityIndex_1.PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');
                _defaultIndexMap = _defaultIndexMap || new IndexMap({
                    '.priority': fallbackObject
                }, {
                    '.priority': PriorityIndex_1.PRIORITY_INDEX
                });
                return _defaultIndexMap;
            },
            enumerable: true,
            configurable: true
        });

        IndexMap.prototype.get = function (indexKey) {
            var sortedMap = util_2.safeGet(this.indexes_, indexKey);
            if (!sortedMap) throw new Error('No index defined for ' + indexKey);

            if (sortedMap === fallbackObject) {
                return null;
            } else {
                return sortedMap;
            }
        };

        IndexMap.prototype.hasIndex = function (indexDefinition) {
            return util_2.contains(this.indexSet_, indexDefinition.toString());
        };

        IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {
            util_1.assert(indexDefinition !== KeyIndex_1.KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
            var childList = [];
            var sawIndexedValue = false;
            var iter = existingChildren.getIterator(Node_1.NamedNode.Wrap);
            var next = iter.getNext();

            while (next) {
                sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);
                childList.push(next);
                next = iter.getNext();
            }

            var newIndex;

            if (sawIndexedValue) {
                newIndex = childSet_1.buildChildSet(childList, indexDefinition.getCompare());
            } else {
                newIndex = fallbackObject;
            }

            var indexName = indexDefinition.toString();
            var newIndexSet = util_2.clone(this.indexSet_);
            newIndexSet[indexName] = indexDefinition;
            var newIndexes = util_2.clone(this.indexes_);
            newIndexes[indexName] = newIndex;
            return new IndexMap(newIndexes, newIndexSet);
        };

        IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {
            var _this = this;

            var newIndexes = util_2.map(this.indexes_, function (indexedChildren, indexName) {
                var index = util_2.safeGet(_this.indexSet_, indexName);
                util_1.assert(index, 'Missing index implementation for ' + indexName);

                if (indexedChildren === fallbackObject) {
                    if (index.isDefinedOn(namedNode.node)) {
                        var childList = [];
                        var iter = existingChildren.getIterator(Node_1.NamedNode.Wrap);
                        var next = iter.getNext();

                        while (next) {
                            if (next.name != namedNode.name) {
                                childList.push(next);
                            }

                            next = iter.getNext();
                        }

                        childList.push(namedNode);
                        return childSet_1.buildChildSet(childList, index.getCompare());
                    } else {
                        return fallbackObject;
                    }
                } else {
                    var existingSnap = existingChildren.get(namedNode.name);
                    var newChildren = indexedChildren;

                    if (existingSnap) {
                        newChildren = newChildren.remove(new Node_1.NamedNode(namedNode.name, existingSnap));
                    }

                    return newChildren.insert(namedNode, namedNode.node);
                }
            });
            return new IndexMap(newIndexes, this.indexSet_);
        };

        IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {
            var newIndexes = util_2.map(this.indexes_, function (indexedChildren) {
                if (indexedChildren === fallbackObject) {
                    return indexedChildren;
                } else {
                    var existingSnap = existingChildren.get(namedNode.name);

                    if (existingSnap) {
                        return indexedChildren.remove(new Node_1.NamedNode(namedNode.name, existingSnap));
                    } else {
                        return indexedChildren;
                    }
                }
            });
            return new IndexMap(newIndexes, this.indexSet_);
        };

        return IndexMap;
    }();

    exports.IndexMap = IndexMap;
});