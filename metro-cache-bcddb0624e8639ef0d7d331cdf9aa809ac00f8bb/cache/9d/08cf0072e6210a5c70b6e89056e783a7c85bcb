__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var tslib_1 = require(_dependencyMap[0], "tslib");

    var util_1 = require(_dependencyMap[1], "@firebase/util");

    var util_2 = require(_dependencyMap[2], "../../util/util");

    var Index_1 = require(_dependencyMap[3], "./Index");

    var ChildrenNode_1 = require(_dependencyMap[4], "../ChildrenNode");

    var Node_1 = require(_dependencyMap[5], "../Node");

    var nodeFromJSON_1 = require(_dependencyMap[6], "../nodeFromJSON");

    var PathIndex = function (_super) {
        tslib_1.__extends(PathIndex, _super);

        function PathIndex(indexPath_) {
            var _this = _super.call(this) || this;

            _this.indexPath_ = indexPath_;
            util_1.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', "Can't create PathIndex with empty path or .priority key");
            return _this;
        }

        PathIndex.prototype.extractChild = function (snap) {
            return snap.getChild(this.indexPath_);
        };

        PathIndex.prototype.isDefinedOn = function (node) {
            return !node.getChild(this.indexPath_).isEmpty();
        };

        PathIndex.prototype.compare = function (a, b) {
            var aChild = this.extractChild(a.node);
            var bChild = this.extractChild(b.node);
            var indexCmp = aChild.compareTo(bChild);

            if (indexCmp === 0) {
                return util_2.nameCompare(a.name, b.name);
            } else {
                return indexCmp;
            }
        };

        PathIndex.prototype.makePost = function (indexValue, name) {
            var valueNode = nodeFromJSON_1.nodeFromJSON(indexValue);
            var node = ChildrenNode_1.ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
            return new Node_1.NamedNode(name, node);
        };

        PathIndex.prototype.maxPost = function () {
            var node = ChildrenNode_1.ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, ChildrenNode_1.MAX_NODE);
            return new Node_1.NamedNode(util_2.MAX_NAME, node);
        };

        PathIndex.prototype.toString = function () {
            return this.indexPath_.slice().join('/');
        };

        return PathIndex;
    }(Index_1.Index);

    exports.PathIndex = PathIndex;
});