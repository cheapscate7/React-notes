__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/cheapscate7/Documents/React-notes/node_modules/react-native-paper/src/components/Button.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _color = require(_dependencyMap[3], "color");

  var _color2 = _interopRequireDefault(_color);

  var _Icon = require(_dependencyMap[4], "./Icon");

  var _Icon2 = _interopRequireDefault(_Icon);

  var _Paper = require(_dependencyMap[5], "./Paper");

  var _Paper2 = _interopRequireDefault(_Paper);

  var _Text = require(_dependencyMap[6], "./Typography/Text");

  var _Text2 = _interopRequireDefault(_Text);

  var _TouchableRipple = require(_dependencyMap[7], "./TouchableRipple");

  var _TouchableRipple2 = _interopRequireDefault(_TouchableRipple);

  var _colors = require(_dependencyMap[8], "../styles/colors");

  var _withTheme = require(_dependencyMap[9], "../core/withTheme");

  var _withTheme2 = _interopRequireDefault(_withTheme);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Button: {
      displayName: "Button"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/cheapscate7/Documents/React-notes/node_modules/react-native-paper/src/components/Button.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var AnimatedPaper = _reactNative.Animated.createAnimatedComponent(_Paper2.default);

  var Button = _wrapComponent("Button")(function (_React$Component) {
    _inherits(Button, _React$Component);

    function Button(props) {
      _classCallCheck(this, Button);

      var _this = _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).call(this, props));

      _this._handlePressIn = function () {
        if (_this.props.raised) {
          _reactNative.Animated.timing(_this.state.elevation, {
            toValue: 8,
            duration: 200
          }).start();
        }
      };

      _this._handlePressOut = function () {
        if (_this.props.raised) {
          _reactNative.Animated.timing(_this.state.elevation, {
            toValue: 2,
            duration: 150
          }).start();
        }
      };

      _this.state = {
        elevation: new _reactNative.Animated.Value(props.raised ? 2 : 0)
      };
      return _this;
    }

    _createClass(Button, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            disabled = _props.disabled,
            compact = _props.compact,
            raised = _props.raised,
            primary = _props.primary,
            dark = _props.dark,
            loading = _props.loading,
            icon = _props.icon,
            buttonColor = _props.color,
            children = _props.children,
            onPress = _props.onPress,
            style = _props.style,
            theme = _props.theme;
        var colors = theme.colors,
            roundness = theme.roundness;
        var fontFamily = theme.fonts.medium;
        var backgroundColor = void 0,
            textColor = void 0,
            isDark = void 0;

        if (raised) {
          if (disabled) {
            backgroundColor = (0, _color2.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();
          } else if (buttonColor) {
            backgroundColor = buttonColor;
          } else if (primary) {
            backgroundColor = colors.primary;
          } else {
            backgroundColor = theme.dark ? '#535354' : _colors.white;
          }
        } else {
          backgroundColor = 'transparent';
        }

        if (typeof dark === 'boolean') {
          isDark = dark;
        } else {
          isDark = backgroundColor === 'transparent' ? false : !(0, _color2.default)(backgroundColor).light();
        }

        if (disabled) {
          textColor = theme.dark ? (0, _color2.default)(_colors.white).alpha(0.3).rgb().string() : (0, _color2.default)(_colors.black).alpha(0.26).rgb().string();
        } else if (raised) {
          textColor = isDark ? _colors.white : _colors.black;
        } else if (buttonColor) {
          textColor = buttonColor;
        } else if (primary) {
          textColor = colors.primary;
        } else {
          textColor = theme.dark ? _colors.white : _colors.black;
        }

        var rippleColor = (0, _color2.default)(textColor).alpha(0.32).rgb().string();
        var buttonStyle = {
          backgroundColor: backgroundColor,
          borderRadius: roundness
        };
        var touchableStyle = {
          borderRadius: roundness
        };
        var textStyle = {
          color: textColor,
          fontFamily: fontFamily
        };
        var elevation = disabled ? 0 : this.state.elevation;
        var content = React.createElement(
          _reactNative.View,
          {
            style: styles.content,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 194
            }
          },
          icon && loading !== true ? React.createElement(_Icon2.default, {
            name: icon,
            size: 16,
            color: textColor,
            style: styles.icon,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 196
            }
          }) : null,
          loading ? React.createElement(_reactNative.ActivityIndicator, {
            size: "small",
            color: textColor,
            style: styles.icon,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 199
            }
          }) : null,
          React.createElement(
            _Text2.default,
            {
              numberOfLines: 1,
              style: [styles.label, compact && styles.compactLabel, textStyle, {
                fontFamily: fontFamily
              }],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 205
              }
            },
            React.Children.map(children, function (child) {
              return typeof child === 'string' ? child.toUpperCase() : child;
            })
          )
        );
        return React.createElement(
          AnimatedPaper,
          {
            style: [styles.button, compact && styles.compact, {
              elevation: elevation
            }, buttonStyle, style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 223
            }
          },
          disabled ? content : React.createElement(
            _TouchableRipple2.default,
            {
              borderless: true,
              delayPressIn: 0,
              onPress: onPress,
              onPressIn: this._handlePressIn,
              onPressOut: this._handlePressOut,
              rippleColor: rippleColor,
              style: touchableStyle,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 235
              }
            },
            content
          )
        );
      }
    }]);

    return Button;
  }(React.Component));

  var styles = _reactNative.StyleSheet.create({
    button: {
      margin: 4,
      minWidth: 88
    },
    compact: {
      minWidth: 64
    },
    content: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-around'
    },
    icon: {
      width: 16,
      marginLeft: 12,
      marginRight: -4
    },
    label: {
      textAlign: 'center',
      marginVertical: 9,
      marginHorizontal: 16
    },
    compactLabel: {
      marginHorizontal: 8
    }
  });

  exports.default = (0, _withTheme2.default)(Button);
});