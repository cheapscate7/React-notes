__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/cheapscate7/Documents/React-notes/node_modules/react-native-paper/src/components/DrawerItem.js";

  var _color = require(_dependencyMap[0], "color");

  var _color2 = _interopRequireDefault(_color);

  var _react = require(_dependencyMap[1], "react");

  var React = _interopRequireWildcard(_react);

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _Icon = require(_dependencyMap[3], "./Icon");

  var _Icon2 = _interopRequireDefault(_Icon);

  var _TouchableRipple = require(_dependencyMap[4], "./TouchableRipple");

  var _TouchableRipple2 = _interopRequireDefault(_TouchableRipple);

  var _colors = require(_dependencyMap[5], "../styles/colors");

  var _withTheme = require(_dependencyMap[6], "../core/withTheme");

  var _withTheme2 = _interopRequireDefault(_withTheme);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  var DrawerItem = function DrawerItem(_ref) {
    var activeColor = _ref.color,
        icon = _ref.icon,
        label = _ref.label,
        active = _ref.active,
        theme = _ref.theme,
        props = _objectWithoutProperties(_ref, ["color", "icon", "label", "active", "theme"]);

    var colors = theme.colors,
        dark = theme.dark;
    var backgroundColor = active ? dark ? _colors.grey700 : _colors.grey300 : 'transparent';
    var labelColor = active ? activeColor || colors.text : (0, _color2.default)(colors.text).alpha(0.54).rgb().string();
    var iconColor = active ? activeColor || colors.text : (0, _color2.default)(colors.text).alpha(0.54).rgb().string();
    var fontFamily = theme.fonts.medium;
    var labelMargin = icon ? 32 : 0;
    return React.createElement(
      _TouchableRipple2.default,
      _extends({}, props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 81
        }
      }),
      React.createElement(
        _reactNative.View,
        {
          style: [styles.wrapper, {
            backgroundColor: backgroundColor
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 82
          }
        },
        icon && React.createElement(_Icon2.default, {
          name: icon,
          size: 24,
          color: iconColor,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 83
          }
        }),
        React.createElement(
          _reactNative.Text,
          {
            numberOfLines: 1,
            style: {
              color: labelColor,
              fontFamily: fontFamily,
              marginLeft: labelMargin,
              marginRight: 32
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 84
            }
          },
          label
        )
      )
    );
  };

  var styles = _reactNative.StyleSheet.create({
    wrapper: {
      flexDirection: 'row',
      alignItems: 'center',
      paddingHorizontal: 16,
      paddingVertical: 16,
      height: 48
    }
  });

  exports.default = (0, _withTheme2.default)(DrawerItem);
});