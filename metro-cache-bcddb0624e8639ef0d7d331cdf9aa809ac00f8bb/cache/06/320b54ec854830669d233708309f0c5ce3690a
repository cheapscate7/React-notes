__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var Operation_1 = require(_dependencyMap[0], "../operation/Operation");

    var util_1 = require(_dependencyMap[1], "@firebase/util");

    var ChildChangeAccumulator_1 = require(_dependencyMap[2], "./ChildChangeAccumulator");

    var Change_1 = require(_dependencyMap[3], "./Change");

    var ChildrenNode_1 = require(_dependencyMap[4], "../snap/ChildrenNode");

    var KeyIndex_1 = require(_dependencyMap[5], "../snap/indexes/KeyIndex");

    var ImmutableTree_1 = require(_dependencyMap[6], "../util/ImmutableTree");

    var Path_1 = require(_dependencyMap[7], "../util/Path");

    var CompleteChildSource_1 = require(_dependencyMap[8], "./CompleteChildSource");

    var ProcessorResult = function () {
        function ProcessorResult(viewCache, changes) {
            this.viewCache = viewCache;
            this.changes = changes;
        }

        return ProcessorResult;
    }();

    exports.ProcessorResult = ProcessorResult;

    var ViewProcessor = function () {
        function ViewProcessor(filter_) {
            this.filter_ = filter_;
        }

        ViewProcessor.prototype.assertIndexed = function (viewCache) {
            util_1.assert(viewCache.getEventCache().getNode().isIndexed(this.filter_.getIndex()), 'Event snap not indexed');
            util_1.assert(viewCache.getServerCache().getNode().isIndexed(this.filter_.getIndex()), 'Server snap not indexed');
        };

        ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {
            var accumulator = new ChildChangeAccumulator_1.ChildChangeAccumulator();
            var newViewCache, filterServerNode;

            if (operation.type === Operation_1.OperationType.OVERWRITE) {
                var overwrite = operation;

                if (overwrite.source.fromUser) {
                    newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
                } else {
                    util_1.assert(overwrite.source.fromServer, 'Unknown source.');
                    filterServerNode = overwrite.source.tagged || oldViewCache.getServerCache().isFiltered() && !overwrite.path.isEmpty();
                    newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
                }
            } else if (operation.type === Operation_1.OperationType.MERGE) {
                var merge = operation;

                if (merge.source.fromUser) {
                    newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
                } else {
                    util_1.assert(merge.source.fromServer, 'Unknown source.');
                    filterServerNode = merge.source.tagged || oldViewCache.getServerCache().isFiltered();
                    newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
                }
            } else if (operation.type === Operation_1.OperationType.ACK_USER_WRITE) {
                var ackUserWrite = operation;

                if (!ackUserWrite.revert) {
                    newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
                } else {
                    newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
                }
            } else if (operation.type === Operation_1.OperationType.LISTEN_COMPLETE) {
                newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);
            } else {
                throw util_1.assertionError('Unknown operation type: ' + operation.type);
            }

            var changes = accumulator.getChanges();
            ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);
            return new ProcessorResult(newViewCache, changes);
        };

        ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {
            var eventSnap = newViewCache.getEventCache();

            if (eventSnap.isFullyInitialized()) {
                var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
                var oldCompleteSnap = oldViewCache.getCompleteEventSnap();

                if (accumulator.length > 0 || !oldViewCache.getEventCache().isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {
                    accumulator.push(Change_1.Change.valueChange(newViewCache.getCompleteEventSnap()));
                }
            }
        };

        ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {
            var oldEventSnap = viewCache.getEventCache();

            if (writesCache.shadowingWrite(changePath) != null) {
                return viewCache;
            } else {
                var newEventCache = void 0,
                    serverNode = void 0;

                if (changePath.isEmpty()) {
                    util_1.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');

                    if (viewCache.getServerCache().isFiltered()) {
                        var serverCache = viewCache.getCompleteServerSnap();
                        var completeChildren = serverCache instanceof ChildrenNode_1.ChildrenNode ? serverCache : ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                        var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);
                        newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);
                    } else {
                        var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                        newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);
                    }
                } else {
                    var childKey = changePath.getFront();

                    if (childKey == '.priority') {
                        util_1.assert(changePath.getLength() == 1, "Can't have a priority with additional path components");
                        var oldEventNode = oldEventSnap.getNode();
                        serverNode = viewCache.getServerCache().getNode();
                        var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);

                        if (updatedPriority != null) {
                            newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);
                        } else {
                            newEventCache = oldEventSnap.getNode();
                        }
                    } else {
                        var childChangePath = changePath.popFront();
                        var newEventChild = void 0;

                        if (oldEventSnap.isCompleteForChild(childKey)) {
                            serverNode = viewCache.getServerCache().getNode();
                            var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);

                            if (eventChildUpdate != null) {
                                newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);
                            } else {
                                newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);
                            }
                        } else {
                            newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());
                        }

                        if (newEventChild != null) {
                            newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
                        } else {
                            newEventCache = oldEventSnap.getNode();
                        }
                    }
                }

                return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());
            }
        };

        ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
            var oldServerSnap = oldViewCache.getServerCache();
            var newServerCache;
            var serverFilter = filterServerNode ? this.filter_ : this.filter_.getIndexedFilter();

            if (changePath.isEmpty()) {
                newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
            } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
                var newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);
                newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
            } else {
                var childKey = changePath.getFront();

                if (!oldServerSnap.isCompleteForPath(changePath) && changePath.getLength() > 1) {
                    return oldViewCache;
                }

                var childChangePath = changePath.popFront();
                var childNode = oldServerSnap.getNode().getImmediateChild(childKey);
                var newChildNode = childNode.updateChild(childChangePath, changedSnap);

                if (childKey == '.priority') {
                    newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
                } else {
                    newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, CompleteChildSource_1.NO_COMPLETE_CHILD_SOURCE, null);
                }
            }

            var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());
            var source = new CompleteChildSource_1.WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);
            return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);
        };

        ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
            var oldEventSnap = oldViewCache.getEventCache();
            var newViewCache, newEventCache;
            var source = new CompleteChildSource_1.WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);

            if (changePath.isEmpty()) {
                newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);
                newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());
            } else {
                var childKey = changePath.getFront();

                if (childKey === '.priority') {
                    newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);
                    newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
                } else {
                    var childChangePath = changePath.popFront();
                    var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
                    var newChild = void 0;

                    if (childChangePath.isEmpty()) {
                        newChild = changedSnap;
                    } else {
                        var childNode = source.getCompleteChild(childKey);

                        if (childNode != null) {
                            if (childChangePath.getBack() === '.priority' && childNode.getChild(childChangePath.parent()).isEmpty()) {
                                newChild = childNode;
                            } else {
                                newChild = childNode.updateChild(childChangePath, changedSnap);
                            }
                        } else {
                            newChild = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                        }
                    }

                    if (!oldChild.equals(newChild)) {
                        var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
                        newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());
                    } else {
                        newViewCache = oldViewCache;
                    }
                }
            }

            return newViewCache;
        };

        ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {
            return viewCache.getEventCache().isCompleteForChild(childKey);
        };

        ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
            var _this = this;

            var curViewCache = viewCache;
            changedChildren.foreach(function (relativePath, childNode) {
                var writePath = path.child(relativePath);

                if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
                    curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
                }
            });
            changedChildren.foreach(function (relativePath, childNode) {
                var writePath = path.child(relativePath);

                if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {
                    curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
                }
            });
            return curViewCache;
        };

        ViewProcessor.prototype.applyMerge_ = function (node, merge) {
            merge.foreach(function (relativePath, childNode) {
                node = node.updateChild(relativePath, childNode);
            });
            return node;
        };

        ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
            var _this = this;

            if (viewCache.getServerCache().getNode().isEmpty() && !viewCache.getServerCache().isFullyInitialized()) {
                return viewCache;
            }

            var curViewCache = viewCache;
            var viewMergeTree;

            if (path.isEmpty()) {
                viewMergeTree = changedChildren;
            } else {
                viewMergeTree = ImmutableTree_1.ImmutableTree.Empty.setTree(path, changedChildren);
            }

            var serverNode = viewCache.getServerCache().getNode();
            viewMergeTree.children.inorderTraversal(function (childKey, childTree) {
                if (serverNode.hasChild(childKey)) {
                    var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);

                    var newChild = _this.applyMerge_(serverChild, childTree);

                    curViewCache = _this.applyServerOverwrite_(curViewCache, new Path_1.Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
                }
            });
            viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {
                var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) && childMergeTree.value == null;

                if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
                    var serverChild = viewCache.getServerCache().getNode().getImmediateChild(childKey);

                    var newChild = _this.applyMerge_(serverChild, childMergeTree);

                    curViewCache = _this.applyServerOverwrite_(curViewCache, new Path_1.Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
                }
            });
            return curViewCache;
        };

        ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
            if (writesCache.shadowingWrite(ackPath) != null) {
                return viewCache;
            }

            var filterServerNode = viewCache.getServerCache().isFiltered();
            var serverCache = viewCache.getServerCache();

            if (affectedTree.value != null) {
                if (ackPath.isEmpty() && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {
                    return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
                } else if (ackPath.isEmpty()) {
                    var changedChildren_1 = ImmutableTree_1.ImmutableTree.Empty;
                    serverCache.getNode().forEachChild(KeyIndex_1.KEY_INDEX, function (name, node) {
                        changedChildren_1 = changedChildren_1.set(new Path_1.Path(name), node);
                    });
                    return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);
                } else {
                    return viewCache;
                }
            } else {
                var changedChildren_2 = ImmutableTree_1.ImmutableTree.Empty;
                affectedTree.foreach(function (mergePath, value) {
                    var serverCachePath = ackPath.child(mergePath);

                    if (serverCache.isCompleteForPath(serverCachePath)) {
                        changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));
                    }
                });
                return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);
            }
        };

        ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {
            var oldServerNode = viewCache.getServerCache();
            var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());
            return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, CompleteChildSource_1.NO_COMPLETE_CHILD_SOURCE, accumulator);
        };

        ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {
            var complete;

            if (writesCache.shadowingWrite(path) != null) {
                return viewCache;
            } else {
                var source = new CompleteChildSource_1.WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
                var oldEventCache = viewCache.getEventCache().getNode();
                var newEventCache = void 0;

                if (path.isEmpty() || path.getFront() === '.priority') {
                    var newNode = void 0;

                    if (viewCache.getServerCache().isFullyInitialized()) {
                        newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());
                    } else {
                        var serverChildren = viewCache.getServerCache().getNode();
                        util_1.assert(serverChildren instanceof ChildrenNode_1.ChildrenNode, 'serverChildren would be complete if leaf node');
                        newNode = writesCache.calcCompleteEventChildren(serverChildren);
                    }

                    newNode = newNode;
                    newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);
                } else {
                    var childKey = path.getFront();
                    var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());

                    if (newChild == null && viewCache.getServerCache().isCompleteForChild(childKey)) {
                        newChild = oldEventCache.getImmediateChild(childKey);
                    }

                    if (newChild != null) {
                        newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);
                    } else if (viewCache.getEventCache().getNode().hasChild(childKey)) {
                        newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode_1.ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);
                    } else {
                        newEventCache = oldEventCache;
                    }

                    if (newEventCache.isEmpty() && viewCache.getServerCache().isFullyInitialized()) {
                        complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());

                        if (complete.isLeafNode()) {
                            newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);
                        }
                    }
                }

                complete = viewCache.getServerCache().isFullyInitialized() || writesCache.shadowingWrite(Path_1.Path.Empty) != null;
                return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());
            }
        };

        return ViewProcessor;
    }();

    exports.ViewProcessor = ViewProcessor;
});