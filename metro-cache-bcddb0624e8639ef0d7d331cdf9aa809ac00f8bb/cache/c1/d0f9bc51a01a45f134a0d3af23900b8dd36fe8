__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var tslib_1 = require(_dependencyMap[0], "tslib");

    var app_1 = require(_dependencyMap[1], "@firebase/app");

    var util_1 = require(_dependencyMap[2], "@firebase/util");

    var util_2 = require(_dependencyMap[2], "@firebase/util");

    var util_3 = require(_dependencyMap[2], "@firebase/util");

    var util_4 = require(_dependencyMap[3], "./util/util");

    var Path_1 = require(_dependencyMap[4], "./util/Path");

    var VisibilityMonitor_1 = require(_dependencyMap[5], "./util/VisibilityMonitor");

    var OnlineMonitor_1 = require(_dependencyMap[6], "./util/OnlineMonitor");

    var util_5 = require(_dependencyMap[2], "@firebase/util");

    var Connection_1 = require(_dependencyMap[7], "../realtime/Connection");

    var util_6 = require(_dependencyMap[2], "@firebase/util");

    var util_7 = require(_dependencyMap[2], "@firebase/util");

    var ServerActions_1 = require(_dependencyMap[8], "./ServerActions");

    var RECONNECT_MIN_DELAY = 1000;
    var RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000;
    var RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000;
    var RECONNECT_DELAY_MULTIPLIER = 1.3;
    var RECONNECT_DELAY_RESET_TIMEOUT = 30000;
    var SERVER_KILL_INTERRUPT_REASON = 'server_kill';
    var INVALID_AUTH_TOKEN_THRESHOLD = 3;

    var PersistentConnection = function (_super) {
        tslib_1.__extends(PersistentConnection, _super);

        function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {
            var _this = _super.call(this) || this;

            _this.repoInfo_ = repoInfo_;
            _this.onDataUpdate_ = onDataUpdate_;
            _this.onConnectStatus_ = onConnectStatus_;
            _this.onServerInfoUpdate_ = onServerInfoUpdate_;
            _this.authTokenProvider_ = authTokenProvider_;
            _this.authOverride_ = authOverride_;
            _this.id = PersistentConnection.nextPersistentConnectionId_++;
            _this.log_ = util_4.logWrapper('p:' + _this.id + ':');
            _this.interruptReasons_ = {};
            _this.listens_ = {};
            _this.outstandingPuts_ = [];
            _this.outstandingPutCount_ = 0;
            _this.onDisconnectRequestQueue_ = [];
            _this.connected_ = false;
            _this.reconnectDelay_ = RECONNECT_MIN_DELAY;
            _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
            _this.securityDebugCallback_ = null;
            _this.lastSessionId = null;
            _this.establishConnectionTimer_ = null;
            _this.visible_ = false;
            _this.requestCBHash_ = {};
            _this.requestNumber_ = 0;
            _this.realtime_ = null;
            _this.authToken_ = null;
            _this.forceTokenRefresh_ = false;
            _this.invalidAuthTokenCount_ = 0;
            _this.firstConnection_ = true;
            _this.lastConnectionAttemptTime_ = null;
            _this.lastConnectionEstablishedTime_ = null;

            if (authOverride_ && !util_7.isNodeSdk()) {
                throw new Error('Auth override specified in options, but not supported on non Node.js platforms');
            }

            _this.scheduleConnect_(0);

            VisibilityMonitor_1.VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);

            if (repoInfo_.host.indexOf('fblocal') === -1) {
                OnlineMonitor_1.OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);
            }

            return _this;
        }

        PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {
            var curReqNum = ++this.requestNumber_;
            var msg = {
                r: curReqNum,
                a: action,
                b: body
            };
            this.log_(util_2.stringify(msg));
            util_3.assert(this.connected_, "sendRequest call when we're not connected not allowed.");
            this.realtime_.sendRequest(msg);

            if (onResponse) {
                this.requestCBHash_[curReqNum] = onResponse;
            }
        };

        PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {
            var queryId = query.queryIdentifier();
            var pathString = query.path.toString();
            this.log_('Listen called for ' + pathString + ' ' + queryId);
            this.listens_[pathString] = this.listens_[pathString] || {};
            util_3.assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');
            util_3.assert(!this.listens_[pathString][queryId], 'listen() called twice for same path/queryId.');
            var listenSpec = {
                onComplete: onComplete,
                hashFn: currentHashFn,
                query: query,
                tag: tag
            };
            this.listens_[pathString][queryId] = listenSpec;

            if (this.connected_) {
                this.sendListen_(listenSpec);
            }
        };

        PersistentConnection.prototype.sendListen_ = function (listenSpec) {
            var _this = this;

            var query = listenSpec.query;
            var pathString = query.path.toString();
            var queryId = query.queryIdentifier();
            this.log_('Listen on ' + pathString + ' for ' + queryId);
            var req = {
                p: pathString
            };
            var action = 'q';

            if (listenSpec.tag) {
                req['q'] = query.queryObject();
                req['t'] = listenSpec.tag;
            }

            req['h'] = listenSpec.hashFn();
            this.sendRequest(action, req, function (message) {
                var payload = message['d'];
                var status = message['s'];
                PersistentConnection.warnOnListenWarnings_(payload, query);
                var currentListenSpec = _this.listens_[pathString] && _this.listens_[pathString][queryId];

                if (currentListenSpec === listenSpec) {
                    _this.log_('listen response', message);

                    if (status !== 'ok') {
                        _this.removeListen_(pathString, queryId);
                    }

                    if (listenSpec.onComplete) {
                        listenSpec.onComplete(status, payload);
                    }
                }
            });
        };

        PersistentConnection.warnOnListenWarnings_ = function (payload, query) {
            if (payload && typeof payload === 'object' && util_1.contains(payload, 'w')) {
                var warnings = util_1.safeGet(payload, 'w');

                if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {
                    var indexSpec = '".indexOn": "' + query.getQueryParams().getIndex().toString() + '"';
                    var indexPath = query.path.toString();
                    util_4.warn("Using an unspecified index. Your data will be downloaded and " + ("filtered on the client. Consider adding " + indexSpec + " at ") + (indexPath + " to your security rules for better performance."));
                }
            }
        };

        PersistentConnection.prototype.refreshAuthToken = function (token) {
            this.authToken_ = token;
            this.log_('Auth token refreshed');

            if (this.authToken_) {
                this.tryAuth();
            } else {
                if (this.connected_) {
                    this.sendRequest('unauth', {}, function () {});
                }
            }

            this.reduceReconnectDelayIfAdminCredential_(token);
        };

        PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {
            var isFirebaseSecret = credential && credential.length === 40;

            if (isFirebaseSecret || util_5.isAdmin(credential)) {
                this.log_('Admin auth credential detected.  Reducing max reconnect time.');
                this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
            }
        };

        PersistentConnection.prototype.tryAuth = function () {
            var _this = this;

            if (this.connected_ && this.authToken_) {
                var token_1 = this.authToken_;
                var authMethod = util_5.isValidFormat(token_1) ? 'auth' : 'gauth';
                var requestData = {
                    cred: token_1
                };

                if (this.authOverride_ === null) {
                    requestData['noauth'] = true;
                } else if (typeof this.authOverride_ === 'object') {
                    requestData['authvar'] = this.authOverride_;
                }

                this.sendRequest(authMethod, requestData, function (res) {
                    var status = res['s'];
                    var data = res['d'] || 'error';

                    if (_this.authToken_ === token_1) {
                        if (status === 'ok') {
                            _this.invalidAuthTokenCount_ = 0;
                        } else {
                            _this.onAuthRevoked_(status, data);
                        }
                    }
                });
            }
        };

        PersistentConnection.prototype.unlisten = function (query, tag) {
            var pathString = query.path.toString();
            var queryId = query.queryIdentifier();
            this.log_('Unlisten called for ' + pathString + ' ' + queryId);
            util_3.assert(query.getQueryParams().isDefault() || !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');
            var listen = this.removeListen_(pathString, queryId);

            if (listen && this.connected_) {
                this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);
            }
        };

        PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {
            this.log_('Unlisten on ' + pathString + ' for ' + queryId);
            var req = {
                p: pathString
            };
            var action = 'n';

            if (tag) {
                req['q'] = queryObj;
                req['t'] = tag;
            }

            this.sendRequest(action, req);
        };

        PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {
            if (this.connected_) {
                this.sendOnDisconnect_('o', pathString, data, onComplete);
            } else {
                this.onDisconnectRequestQueue_.push({
                    pathString: pathString,
                    action: 'o',
                    data: data,
                    onComplete: onComplete
                });
            }
        };

        PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {
            if (this.connected_) {
                this.sendOnDisconnect_('om', pathString, data, onComplete);
            } else {
                this.onDisconnectRequestQueue_.push({
                    pathString: pathString,
                    action: 'om',
                    data: data,
                    onComplete: onComplete
                });
            }
        };

        PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {
            if (this.connected_) {
                this.sendOnDisconnect_('oc', pathString, null, onComplete);
            } else {
                this.onDisconnectRequestQueue_.push({
                    pathString: pathString,
                    action: 'oc',
                    data: null,
                    onComplete: onComplete
                });
            }
        };

        PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {
            var request = {
                p: pathString,
                d: data
            };
            this.log_('onDisconnect ' + action, request);
            this.sendRequest(action, request, function (response) {
                if (onComplete) {
                    setTimeout(function () {
                        onComplete(response['s'], response['d']);
                    }, Math.floor(0));
                }
            });
        };

        PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {
            this.putInternal('p', pathString, data, onComplete, hash);
        };

        PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {
            this.putInternal('m', pathString, data, onComplete, hash);
        };

        PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {
            var request = {
                p: pathString,
                d: data
            };
            if (hash !== undefined) request['h'] = hash;
            this.outstandingPuts_.push({
                action: action,
                request: request,
                onComplete: onComplete
            });
            this.outstandingPutCount_++;
            var index = this.outstandingPuts_.length - 1;

            if (this.connected_) {
                this.sendPut_(index);
            } else {
                this.log_('Buffering put: ' + pathString);
            }
        };

        PersistentConnection.prototype.sendPut_ = function (index) {
            var _this = this;

            var action = this.outstandingPuts_[index].action;
            var request = this.outstandingPuts_[index].request;
            var onComplete = this.outstandingPuts_[index].onComplete;
            this.outstandingPuts_[index].queued = this.connected_;
            this.sendRequest(action, request, function (message) {
                _this.log_(action + ' response', message);

                delete _this.outstandingPuts_[index];
                _this.outstandingPutCount_--;

                if (_this.outstandingPutCount_ === 0) {
                    _this.outstandingPuts_ = [];
                }

                if (onComplete) onComplete(message['s'], message['d']);
            });
        };

        PersistentConnection.prototype.reportStats = function (stats) {
            var _this = this;

            if (this.connected_) {
                var request = {
                    c: stats
                };
                this.log_('reportStats', request);
                this.sendRequest('s', request, function (result) {
                    var status = result['s'];

                    if (status !== 'ok') {
                        var errorReason = result['d'];

                        _this.log_('reportStats', 'Error sending stats: ' + errorReason);
                    }
                });
            }
        };

        PersistentConnection.prototype.onDataMessage_ = function (message) {
            if ('r' in message) {
                this.log_('from server: ' + util_2.stringify(message));
                var reqNum = message['r'];
                var onResponse = this.requestCBHash_[reqNum];

                if (onResponse) {
                    delete this.requestCBHash_[reqNum];
                    onResponse(message['b']);
                }
            } else if ('error' in message) {
                throw 'A server-side error has occurred: ' + message['error'];
            } else if ('a' in message) {
                this.onDataPush_(message['a'], message['b']);
            }
        };

        PersistentConnection.prototype.onDataPush_ = function (action, body) {
            this.log_('handleServerMessage', action, body);
            if (action === 'd') this.onDataUpdate_(body['p'], body['d'], false, body['t']);else if (action === 'm') this.onDataUpdate_(body['p'], body['d'], true, body['t']);else if (action === 'c') this.onListenRevoked_(body['p'], body['q']);else if (action === 'ac') this.onAuthRevoked_(body['s'], body['d']);else if (action === 'sd') this.onSecurityDebugPacket_(body);else util_4.error('Unrecognized action received from server: ' + util_2.stringify(action) + '\nAre you using the latest client?');
        };

        PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {
            this.log_('connection ready');
            this.connected_ = true;
            this.lastConnectionEstablishedTime_ = new Date().getTime();
            this.handleTimestamp_(timestamp);
            this.lastSessionId = sessionId;

            if (this.firstConnection_) {
                this.sendConnectStats_();
            }

            this.restoreState_();
            this.firstConnection_ = false;
            this.onConnectStatus_(true);
        };

        PersistentConnection.prototype.scheduleConnect_ = function (timeout) {
            var _this = this;

            util_3.assert(!this.realtime_, "Scheduling a connect when we're already connected/ing?");

            if (this.establishConnectionTimer_) {
                clearTimeout(this.establishConnectionTimer_);
            }

            this.establishConnectionTimer_ = setTimeout(function () {
                _this.establishConnectionTimer_ = null;

                _this.establishConnection_();
            }, Math.floor(timeout));
        };

        PersistentConnection.prototype.onVisible_ = function (visible) {
            if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {
                this.log_('Window became visible.  Reducing delay.');
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;

                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            }

            this.visible_ = visible;
        };

        PersistentConnection.prototype.onOnline_ = function (online) {
            if (online) {
                this.log_('Browser went online.');
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;

                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            } else {
                this.log_('Browser went offline.  Killing connection.');

                if (this.realtime_) {
                    this.realtime_.close();
                }
            }
        };

        PersistentConnection.prototype.onRealtimeDisconnect_ = function () {
            this.log_('data client disconnected');
            this.connected_ = false;
            this.realtime_ = null;
            this.cancelSentTransactions_();
            this.requestCBHash_ = {};

            if (this.shouldReconnect_()) {
                if (!this.visible_) {
                    this.log_("Window isn't visible.  Delaying reconnect.");
                    this.reconnectDelay_ = this.maxReconnectDelay_;
                    this.lastConnectionAttemptTime_ = new Date().getTime();
                } else if (this.lastConnectionEstablishedTime_) {
                    var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
                    if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) this.reconnectDelay_ = RECONNECT_MIN_DELAY;
                    this.lastConnectionEstablishedTime_ = null;
                }

                var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
                var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
                reconnectDelay = Math.random() * reconnectDelay;
                this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');
                this.scheduleConnect_(reconnectDelay);
                this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
            }

            this.onConnectStatus_(false);
        };

        PersistentConnection.prototype.establishConnection_ = function () {
            if (this.shouldReconnect_()) {
                this.log_('Making a connection attempt');
                this.lastConnectionAttemptTime_ = new Date().getTime();
                this.lastConnectionEstablishedTime_ = null;
                var onDataMessage_1 = this.onDataMessage_.bind(this);
                var onReady_1 = this.onReady_.bind(this);
                var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);
                var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;
                var self_1 = this;
                var lastSessionId_1 = this.lastSessionId;
                var canceled_1 = false;
                var connection_1 = null;

                var closeFn_1 = function closeFn_1() {
                    if (connection_1) {
                        connection_1.close();
                    } else {
                        canceled_1 = true;
                        onDisconnect_1();
                    }
                };

                var sendRequestFn = function sendRequestFn(msg) {
                    util_3.assert(connection_1, "sendRequest call when we're not connected not allowed.");
                    connection_1.sendRequest(msg);
                };

                this.realtime_ = {
                    close: closeFn_1,
                    sendRequest: sendRequestFn
                };
                var forceRefresh = this.forceTokenRefresh_;
                this.forceTokenRefresh_ = false;
                this.authTokenProvider_.getToken(forceRefresh).then(function (result) {
                    if (!canceled_1) {
                        util_4.log('getToken() completed. Creating connection.');
                        self_1.authToken_ = result && result.accessToken;
                        connection_1 = new Connection_1.Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1, function (reason) {
                            util_4.warn(reason + ' (' + self_1.repoInfo_.toString() + ')');
                            self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);
                        }, lastSessionId_1);
                    } else {
                        util_4.log('getToken() completed but was canceled');
                    }
                }).then(null, function (error) {
                    self_1.log_('Failed to get token: ' + error);

                    if (!canceled_1) {
                        if (util_6.CONSTANTS.NODE_ADMIN) {
                            util_4.warn(error);
                        }

                        closeFn_1();
                    }
                });
            }
        };

        PersistentConnection.prototype.interrupt = function (reason) {
            util_4.log('Interrupting connection for reason: ' + reason);
            this.interruptReasons_[reason] = true;

            if (this.realtime_) {
                this.realtime_.close();
            } else {
                if (this.establishConnectionTimer_) {
                    clearTimeout(this.establishConnectionTimer_);
                    this.establishConnectionTimer_ = null;
                }

                if (this.connected_) {
                    this.onRealtimeDisconnect_();
                }
            }
        };

        PersistentConnection.prototype.resume = function (reason) {
            util_4.log('Resuming connection for reason: ' + reason);
            delete this.interruptReasons_[reason];

            if (util_1.isEmpty(this.interruptReasons_)) {
                this.reconnectDelay_ = RECONNECT_MIN_DELAY;

                if (!this.realtime_) {
                    this.scheduleConnect_(0);
                }
            }
        };

        PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {
            var delta = timestamp - new Date().getTime();
            this.onServerInfoUpdate_({
                serverTimeOffset: delta
            });
        };

        PersistentConnection.prototype.cancelSentTransactions_ = function () {
            for (var i = 0; i < this.outstandingPuts_.length; i++) {
                var put = this.outstandingPuts_[i];

                if (put && 'h' in put.request && put.queued) {
                    if (put.onComplete) put.onComplete('disconnect');
                    delete this.outstandingPuts_[i];
                    this.outstandingPutCount_--;
                }
            }

            if (this.outstandingPutCount_ === 0) this.outstandingPuts_ = [];
        };

        PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {
            var queryId;

            if (!query) {
                queryId = 'default';
            } else {
                queryId = query.map(function (q) {
                    return util_4.ObjectToUniqueKey(q);
                }).join('$');
            }

            var listen = this.removeListen_(pathString, queryId);
            if (listen && listen.onComplete) listen.onComplete('permission_denied');
        };

        PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {
            var normalizedPathString = new Path_1.Path(pathString).toString();
            var listen;

            if (this.listens_[normalizedPathString] !== undefined) {
                listen = this.listens_[normalizedPathString][queryId];
                delete this.listens_[normalizedPathString][queryId];

                if (util_1.getCount(this.listens_[normalizedPathString]) === 0) {
                    delete this.listens_[normalizedPathString];
                }
            } else {
                listen = undefined;
            }

            return listen;
        };

        PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {
            util_4.log('Auth token revoked: ' + statusCode + '/' + explanation);
            this.authToken_ = null;
            this.forceTokenRefresh_ = true;
            this.realtime_.close();

            if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {
                this.invalidAuthTokenCount_++;

                if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {
                    this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
                    this.authTokenProvider_.notifyForInvalidToken();
                }
            }
        };

        PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {
            if (this.securityDebugCallback_) {
                this.securityDebugCallback_(body);
            } else {
                if ('msg' in body) {
                    console.log('FIREBASE: ' + body['msg'].replace('\n', '\nFIREBASE: '));
                }
            }
        };

        PersistentConnection.prototype.restoreState_ = function () {
            var _this = this;

            this.tryAuth();
            util_1.forEach(this.listens_, function (pathString, queries) {
                util_1.forEach(queries, function (key, listenSpec) {
                    _this.sendListen_(listenSpec);
                });
            });

            for (var i = 0; i < this.outstandingPuts_.length; i++) {
                if (this.outstandingPuts_[i]) this.sendPut_(i);
            }

            while (this.onDisconnectRequestQueue_.length) {
                var request = this.onDisconnectRequestQueue_.shift();
                this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
            }
        };

        PersistentConnection.prototype.sendConnectStats_ = function () {
            var stats = {};
            var clientName = 'js';

            if (util_6.CONSTANTS.NODE_ADMIN) {
                clientName = 'admin_node';
            } else if (util_6.CONSTANTS.NODE_CLIENT) {
                clientName = 'node';
            }

            stats['sdk.' + clientName + '.' + app_1.default.SDK_VERSION.replace(/\./g, '-')] = 1;

            if (util_7.isMobileCordova()) {
                stats['framework.cordova'] = 1;
            } else if (util_7.isReactNative()) {
                stats['framework.reactnative'] = 1;
            }

            this.reportStats(stats);
        };

        PersistentConnection.prototype.shouldReconnect_ = function () {
            var online = OnlineMonitor_1.OnlineMonitor.getInstance().currentlyOnline();
            return util_1.isEmpty(this.interruptReasons_) && online;
        };

        PersistentConnection.nextPersistentConnectionId_ = 0;
        PersistentConnection.nextConnectionId_ = 0;
        return PersistentConnection;
    }(ServerActions_1.ServerActions);

    exports.PersistentConnection = PersistentConnection;
});