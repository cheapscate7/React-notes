__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var CacheNode_1 = require(_dependencyMap[0], "./view/CacheNode");

    var ChildrenNode_1 = require(_dependencyMap[1], "./snap/ChildrenNode");

    var util_1 = require(_dependencyMap[2], "@firebase/util");

    var util_2 = require(_dependencyMap[2], "@firebase/util");

    var ViewCache_1 = require(_dependencyMap[3], "./view/ViewCache");

    var View_1 = require(_dependencyMap[4], "./view/View");

    var __referenceConstructor;

    var SyncPoint = function () {
        function SyncPoint() {
            this.views_ = {};
        }

        Object.defineProperty(SyncPoint, "__referenceConstructor", {
            get: function get() {
                util_1.assert(__referenceConstructor, 'Reference.ts has not been loaded');
                return __referenceConstructor;
            },
            set: function set(val) {
                util_1.assert(!__referenceConstructor, '__referenceConstructor has already been defined');
                __referenceConstructor = val;
            },
            enumerable: true,
            configurable: true
        });

        SyncPoint.prototype.isEmpty = function () {
            return util_2.isEmpty(this.views_);
        };

        SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {
            var queryId = operation.source.queryId;

            if (queryId !== null) {
                var view = util_2.safeGet(this.views_, queryId);
                util_1.assert(view != null, 'SyncTree gave us an op for an invalid query.');
                return view.applyOperation(operation, writesCache, optCompleteServerCache);
            } else {
                var events_1 = [];
                util_2.forEach(this.views_, function (key, view) {
                    events_1 = events_1.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));
                });
                return events_1;
            }
        };

        SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {
            var queryId = query.queryIdentifier();
            var view = util_2.safeGet(this.views_, queryId);

            if (!view) {
                var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);
                var eventCacheComplete = false;

                if (eventCache) {
                    eventCacheComplete = true;
                } else if (serverCache instanceof ChildrenNode_1.ChildrenNode) {
                    eventCache = writesCache.calcCompleteEventChildren(serverCache);
                    eventCacheComplete = false;
                } else {
                    eventCache = ChildrenNode_1.ChildrenNode.EMPTY_NODE;
                    eventCacheComplete = false;
                }

                var viewCache = new ViewCache_1.ViewCache(new CacheNode_1.CacheNode(eventCache, eventCacheComplete, false), new CacheNode_1.CacheNode(serverCache, serverCacheComplete, false));
                view = new View_1.View(query, viewCache);
                this.views_[queryId] = view;
            }

            view.addEventRegistration(eventRegistration);
            return view.getInitialEvents(eventRegistration);
        };

        SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {
            var queryId = query.queryIdentifier();
            var removed = [];
            var cancelEvents = [];
            var hadCompleteView = this.hasCompleteView();

            if (queryId === 'default') {
                var self_1 = this;
                util_2.forEach(this.views_, function (viewQueryId, view) {
                    cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));

                    if (view.isEmpty()) {
                        delete self_1.views_[viewQueryId];

                        if (!view.getQuery().getQueryParams().loadsAllData()) {
                            removed.push(view.getQuery());
                        }
                    }
                });
            } else {
                var view = util_2.safeGet(this.views_, queryId);

                if (view) {
                    cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));

                    if (view.isEmpty()) {
                        delete this.views_[queryId];

                        if (!view.getQuery().getQueryParams().loadsAllData()) {
                            removed.push(view.getQuery());
                        }
                    }
                }
            }

            if (hadCompleteView && !this.hasCompleteView()) {
                removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));
            }

            return {
                removed: removed,
                events: cancelEvents
            };
        };

        SyncPoint.prototype.getQueryViews = function () {
            var _this = this;

            var values = Object.keys(this.views_).map(function (key) {
                return _this.views_[key];
            });
            return values.filter(function (view) {
                return !view.getQuery().getQueryParams().loadsAllData();
            });
        };

        SyncPoint.prototype.getCompleteServerCache = function (path) {
            var serverCache = null;
            util_2.forEach(this.views_, function (key, view) {
                serverCache = serverCache || view.getCompleteServerCache(path);
            });
            return serverCache;
        };

        SyncPoint.prototype.viewForQuery = function (query) {
            var params = query.getQueryParams();

            if (params.loadsAllData()) {
                return this.getCompleteView();
            } else {
                var queryId = query.queryIdentifier();
                return util_2.safeGet(this.views_, queryId);
            }
        };

        SyncPoint.prototype.viewExistsForQuery = function (query) {
            return this.viewForQuery(query) != null;
        };

        SyncPoint.prototype.hasCompleteView = function () {
            return this.getCompleteView() != null;
        };

        SyncPoint.prototype.getCompleteView = function () {
            var completeView = util_2.findValue(this.views_, function (view) {
                return view.getQuery().getQueryParams().loadsAllData();
            });
            return completeView || null;
        };

        return SyncPoint;
    }();

    exports.SyncPoint = SyncPoint;
});