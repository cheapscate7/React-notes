__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = require(_dependencyMap[0], "@firebase/util");

    var contains = function contains(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
    };

    var DEFAULT_ENTRY_NAME = '[DEFAULT]';
    var tokenListeners = [];

    var FirebaseAppImpl = function () {
        function FirebaseAppImpl(options, name, firebase_) {
            this.firebase_ = firebase_;
            this.isDeleted_ = false;
            this.services_ = {};
            this.name_ = name;
            this.options_ = util_1.deepCopy(options);
            this.INTERNAL = {
                getUid: function getUid() {
                    return null;
                },
                getToken: function getToken() {
                    return Promise.resolve(null);
                },
                addAuthTokenListener: function addAuthTokenListener(callback) {
                    tokenListeners.push(callback);
                    setTimeout(function () {
                        return callback(null);
                    }, 0);
                },
                removeAuthTokenListener: function removeAuthTokenListener(callback) {
                    tokenListeners = tokenListeners.filter(function (listener) {
                        return listener !== callback;
                    });
                }
            };
        }

        Object.defineProperty(FirebaseAppImpl.prototype, "name", {
            get: function get() {
                this.checkDestroyed_();
                return this.name_;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FirebaseAppImpl.prototype, "options", {
            get: function get() {
                this.checkDestroyed_();
                return this.options_;
            },
            enumerable: true,
            configurable: true
        });

        FirebaseAppImpl.prototype.delete = function () {
            var _this = this;

            return new Promise(function (resolve) {
                _this.checkDestroyed_();

                resolve();
            }).then(function () {
                _this.firebase_.INTERNAL.removeApp(_this.name_);

                var services = [];
                Object.keys(_this.services_).forEach(function (serviceKey) {
                    Object.keys(_this.services_[serviceKey]).forEach(function (instanceKey) {
                        services.push(_this.services_[serviceKey][instanceKey]);
                    });
                });
                return Promise.all(services.map(function (service) {
                    return service.INTERNAL.delete();
                }));
            }).then(function () {
                _this.isDeleted_ = true;
                _this.services_ = {};
            });
        };

        FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
            if (instanceIdentifier === void 0) {
                instanceIdentifier = DEFAULT_ENTRY_NAME;
            }

            this.checkDestroyed_();

            if (!this.services_[name]) {
                this.services_[name] = {};
            }

            if (!this.services_[name][instanceIdentifier]) {
                var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME ? instanceIdentifier : undefined;
                var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);
                this.services_[name][instanceIdentifier] = service;
            }

            return this.services_[name][instanceIdentifier];
        };

        FirebaseAppImpl.prototype.extendApp = function (props) {
            var _this = this;

            util_1.deepExtend(this, props);

            if (props.INTERNAL && props.INTERNAL.addAuthTokenListener) {
                tokenListeners.forEach(function (listener) {
                    _this.INTERNAL.addAuthTokenListener(listener);
                });
                tokenListeners = [];
            }
        };

        FirebaseAppImpl.prototype.checkDestroyed_ = function () {
            if (this.isDeleted_) {
                error('app-deleted', {
                    name: this.name_
                });
            }
        };

        return FirebaseAppImpl;
    }();

    FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options || FirebaseAppImpl.prototype.delete || console.log('dc');

    function createFirebaseNamespace() {
        var apps_ = {};
        var factories = {};
        var appHooks = {};
        var namespace = {
            __esModule: true,
            initializeApp: initializeApp,
            app: app,
            apps: null,
            Promise: Promise,
            SDK_VERSION: '4.10.1',
            INTERNAL: {
                registerService: registerService,
                createFirebaseNamespace: createFirebaseNamespace,
                extendNamespace: extendNamespace,
                createSubscribe: util_1.createSubscribe,
                ErrorFactory: util_1.ErrorFactory,
                removeApp: removeApp,
                factories: factories,
                useAsService: useAsService,
                Promise: Promise,
                deepExtend: util_1.deepExtend
            }
        };
        util_1.patchProperty(namespace, 'default', namespace);
        Object.defineProperty(namespace, 'apps', {
            get: getApps
        });

        function removeApp(name) {
            var app = apps_[name];
            callAppHooks(app, 'delete');
            delete apps_[name];
        }

        function app(name) {
            name = name || DEFAULT_ENTRY_NAME;

            if (!contains(apps_, name)) {
                error('no-app', {
                    name: name
                });
            }

            return apps_[name];
        }

        util_1.patchProperty(app, 'App', FirebaseAppImpl);

        function initializeApp(options, name) {
            if (name === undefined) {
                name = DEFAULT_ENTRY_NAME;
            } else {
                if (typeof name !== 'string' || name === '') {
                    error('bad-app-name', {
                        name: name + ''
                    });
                }
            }

            if (contains(apps_, name)) {
                error('duplicate-app', {
                    name: name
                });
            }

            var app = new FirebaseAppImpl(options, name, namespace);
            apps_[name] = app;
            callAppHooks(app, 'create');
            return app;
        }

        function getApps() {
            return Object.keys(apps_).map(function (name) {
                return apps_[name];
            });
        }

        function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {
            if (factories[name]) {
                error('duplicate-service', {
                    name: name
                });
            }

            factories[name] = createService;

            if (appHook) {
                appHooks[name] = appHook;
                getApps().forEach(function (app) {
                    appHook('create', app);
                });
            }

            var serviceNamespace = function serviceNamespace(appArg) {
                if (appArg === void 0) {
                    appArg = app();
                }

                if (typeof appArg[name] !== 'function') {
                    error('invalid-app-argument', {
                        name: name
                    });
                }

                return appArg[name]();
            };

            if (serviceProperties !== undefined) {
                util_1.deepExtend(serviceNamespace, serviceProperties);
            }

            namespace[name] = serviceNamespace;

            FirebaseAppImpl.prototype[name] = function () {
                var args = [];

                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }

                var serviceFxn = this._getService.bind(this, name);

                return serviceFxn.apply(this, allowMultipleInstances ? args : []);
            };

            return serviceNamespace;
        }

        function extendNamespace(props) {
            util_1.deepExtend(namespace, props);
        }

        function callAppHooks(app, eventName) {
            Object.keys(factories).forEach(function (serviceName) {
                var factoryName = useAsService(app, serviceName);

                if (factoryName === null) {
                    return;
                }

                if (appHooks[factoryName]) {
                    appHooks[factoryName](eventName, app);
                }
            });
        }

        function useAsService(app, name) {
            if (name === 'serverAuth') {
                return null;
            }

            var useService = name;
            var options = app.options;
            return useService;
        }

        return namespace;
    }

    exports.createFirebaseNamespace = createFirebaseNamespace;

    function error(code, args) {
        throw appErrors.create(code, args);
    }

    var errors = {
        'no-app': "No Firebase App '{$name}' has been created - " + 'call Firebase App.initializeApp()',
        'bad-app-name': "Illegal App name: '{$name}",
        'duplicate-app': "Firebase App named '{$name}' already exists",
        'app-deleted': "Firebase App named '{$name}' already deleted",
        'duplicate-service': "Firebase service named '{$name}' already registered",
        'sa-not-supported': 'Initializing the Firebase SDK with a service ' + 'account is only allowed in a Node.js environment. On client ' + 'devices, you should instead initialize the SDK with an api key and ' + 'auth domain',
        'invalid-app-argument': 'firebase.{$name}() takes either no argument or a ' + 'Firebase App instance.'
    };
    var appErrors = new util_1.ErrorFactory('app', 'Firebase', errors);
});