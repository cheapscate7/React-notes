__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = require(_dependencyMap[1], "./../../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/cheapscate7/Documents/React-notes/node_modules/react-native-paper/src/components/Toolbar/ToolbarContent.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _color = require(_dependencyMap[3], "color");

  var _color2 = _interopRequireDefault(_color);

  var _Text = require(_dependencyMap[4], "../Typography/Text");

  var _Text2 = _interopRequireDefault(_Text);

  var _withTheme = require(_dependencyMap[5], "../../core/withTheme");

  var _withTheme2 = _interopRequireDefault(_withTheme);

  var _colors = require(_dependencyMap[6], "../../styles/colors");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ToolbarContent: {
      displayName: "ToolbarContent"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/cheapscate7/Documents/React-notes/node_modules/react-native-paper/src/components/Toolbar/ToolbarContent.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ToolbarContent = _wrapComponent("ToolbarContent")(function (_React$Component) {
    _inherits(ToolbarContent, _React$Component);

    function ToolbarContent() {
      _classCallCheck(this, ToolbarContent);

      return _possibleConstructorReturn(this, (ToolbarContent.__proto__ || Object.getPrototypeOf(ToolbarContent)).apply(this, arguments));
    }

    _createClass(ToolbarContent, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            dark = _props.dark,
            subtitle = _props.subtitle,
            subtitleStyle = _props.subtitleStyle,
            style = _props.style,
            titleStyle = _props.titleStyle,
            theme = _props.theme,
            title = _props.title;
        var fonts = theme.fonts;
        var titleColor = dark ? _colors.white : _colors.black;
        var subtitleColor = (0, _color2.default)(titleColor).alpha(0.7).rgb().string();
        return React.createElement(
          _reactNative.View,
          {
            style: [styles.container, style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 65
            }
          },
          React.createElement(
            _Text2.default,
            {
              style: [{
                color: titleColor,
                fontFamily: fonts.medium
              }, styles.title, titleStyle],
              numberOfLines: 1,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 66
              }
            },
            title
          ),
          subtitle && React.createElement(
            _Text2.default,
            {
              style: [styles.subtitle, {
                color: subtitleColor
              }, subtitleStyle],
              numberOfLines: 1,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 77
              }
            },
            subtitle
          )
        );
      }
    }]);

    return ToolbarContent;
  }(React.Component));

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      paddingHorizontal: 12
    },
    title: {
      fontSize: 20
    },
    subtitle: {
      fontSize: 14
    }
  });

  exports.default = (0, _withTheme2.default)(ToolbarContent);
});