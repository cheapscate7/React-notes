__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var errorsExports = require(_dependencyMap[0], "./error");

    var object = require(_dependencyMap[1], "./object");

    var promiseimpl = require(_dependencyMap[2], "./promise_external");

    var type = require(_dependencyMap[3], "./type");

    var XhrIoExports = require(_dependencyMap[4], "./xhrio");

    var NetworkXhrIo = function () {
        function NetworkXhrIo() {
            var _this = this;

            this.sent_ = false;
            this.xhr_ = new XMLHttpRequest();
            this.errorCode_ = XhrIoExports.ErrorCode.NO_ERROR;
            this.sendPromise_ = promiseimpl.make(function (resolve, reject) {
                _this.xhr_.addEventListener('abort', function (event) {
                    _this.errorCode_ = XhrIoExports.ErrorCode.ABORT;
                    resolve(_this);
                });

                _this.xhr_.addEventListener('error', function (event) {
                    _this.errorCode_ = XhrIoExports.ErrorCode.NETWORK_ERROR;
                    resolve(_this);
                });

                _this.xhr_.addEventListener('load', function (event) {
                    resolve(_this);
                });
            });
        }

        NetworkXhrIo.prototype.send = function (url, method, opt_body, opt_headers) {
            var _this = this;

            if (this.sent_) {
                throw errorsExports.internalError('cannot .send() more than once');
            }

            this.sent_ = true;
            this.xhr_.open(method, url, true);

            if (type.isDef(opt_headers)) {
                var headers = opt_headers;
                object.forEach(headers, function (key, val) {
                    _this.xhr_.setRequestHeader(key, val.toString());
                });
            }

            if (type.isDef(opt_body)) {
                this.xhr_.send(opt_body);
            } else {
                this.xhr_.send();
            }

            return this.sendPromise_;
        };

        NetworkXhrIo.prototype.getErrorCode = function () {
            if (!this.sent_) {
                throw errorsExports.internalError('cannot .getErrorCode() before sending');
            }

            return this.errorCode_;
        };

        NetworkXhrIo.prototype.getStatus = function () {
            if (!this.sent_) {
                throw errorsExports.internalError('cannot .getStatus() before sending');
            }

            try {
                return this.xhr_.status;
            } catch (e) {
                return -1;
            }
        };

        NetworkXhrIo.prototype.getResponseText = function () {
            if (!this.sent_) {
                throw errorsExports.internalError('cannot .getResponseText() before sending');
            }

            return this.xhr_.responseText;
        };

        NetworkXhrIo.prototype.abort = function () {
            this.xhr_.abort();
        };

        NetworkXhrIo.prototype.getResponseHeader = function (header) {
            return this.xhr_.getResponseHeader(header);
        };

        NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {
            if (type.isDef(this.xhr_.upload)) {
                this.xhr_.upload.addEventListener('progress', listener);
            }
        };

        NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {
            if (type.isDef(this.xhr_.upload)) {
                this.xhr_.upload.removeEventListener('progress', listener);
            }
        };

        return NetworkXhrIo;
    }();

    exports.NetworkXhrIo = NetworkXhrIo;
});