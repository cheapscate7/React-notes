__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var SortedMapIterator = function () {
        function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {
            if (resultGenerator_ === void 0) {
                resultGenerator_ = null;
            }

            this.isReverse_ = isReverse_;
            this.resultGenerator_ = resultGenerator_;
            this.nodeStack_ = [];
            var cmp = 1;

            while (!node.isEmpty()) {
                node = node;
                cmp = startKey ? comparator(node.key, startKey) : 1;
                if (isReverse_) cmp *= -1;

                if (cmp < 0) {
                    if (this.isReverse_) {
                        node = node.left;
                    } else {
                        node = node.right;
                    }
                } else if (cmp === 0) {
                    this.nodeStack_.push(node);
                    break;
                } else {
                    this.nodeStack_.push(node);

                    if (this.isReverse_) {
                        node = node.right;
                    } else {
                        node = node.left;
                    }
                }
            }
        }

        SortedMapIterator.prototype.getNext = function () {
            if (this.nodeStack_.length === 0) return null;
            var node = this.nodeStack_.pop();
            var result;
            if (this.resultGenerator_) result = this.resultGenerator_(node.key, node.value);else result = {
                key: node.key,
                value: node.value
            };

            if (this.isReverse_) {
                node = node.left;

                while (!node.isEmpty()) {
                    this.nodeStack_.push(node);
                    node = node.right;
                }
            } else {
                node = node.right;

                while (!node.isEmpty()) {
                    this.nodeStack_.push(node);
                    node = node.left;
                }
            }

            return result;
        };

        SortedMapIterator.prototype.hasNext = function () {
            return this.nodeStack_.length > 0;
        };

        SortedMapIterator.prototype.peek = function () {
            if (this.nodeStack_.length === 0) return null;
            var node = this.nodeStack_[this.nodeStack_.length - 1];

            if (this.resultGenerator_) {
                return this.resultGenerator_(node.key, node.value);
            } else {
                return {
                    key: node.key,
                    value: node.value
                };
            }
        };

        return SortedMapIterator;
    }();

    exports.SortedMapIterator = SortedMapIterator;

    var LLRBNode = function () {
        function LLRBNode(key, value, color, left, right) {
            this.key = key;
            this.value = value;
            this.color = color != null ? color : LLRBNode.RED;
            this.left = left != null ? left : SortedMap.EMPTY_NODE;
            this.right = right != null ? right : SortedMap.EMPTY_NODE;
        }

        LLRBNode.prototype.copy = function (key, value, color, left, right) {
            return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
        };

        LLRBNode.prototype.count = function () {
            return this.left.count() + 1 + this.right.count();
        };

        LLRBNode.prototype.isEmpty = function () {
            return false;
        };

        LLRBNode.prototype.inorderTraversal = function (action) {
            return this.left.inorderTraversal(action) || action(this.key, this.value) || this.right.inorderTraversal(action);
        };

        LLRBNode.prototype.reverseTraversal = function (action) {
            return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);
        };

        LLRBNode.prototype.min_ = function () {
            if (this.left.isEmpty()) {
                return this;
            } else {
                return this.left.min_();
            }
        };

        LLRBNode.prototype.minKey = function () {
            return this.min_().key;
        };

        LLRBNode.prototype.maxKey = function () {
            if (this.right.isEmpty()) {
                return this.key;
            } else {
                return this.right.maxKey();
            }
        };

        LLRBNode.prototype.insert = function (key, value, comparator) {
            var cmp, n;
            n = this;
            cmp = comparator(key, n.key);

            if (cmp < 0) {
                n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
            } else if (cmp === 0) {
                n = n.copy(null, value, null, null, null);
            } else {
                n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
            }

            return n.fixUp_();
        };

        LLRBNode.prototype.removeMin_ = function () {
            if (this.left.isEmpty()) {
                return SortedMap.EMPTY_NODE;
            }

            var n = this;
            if (!n.left.isRed_() && !n.left.left.isRed_()) n = n.moveRedLeft_();
            n = n.copy(null, null, null, n.left.removeMin_(), null);
            return n.fixUp_();
        };

        LLRBNode.prototype.remove = function (key, comparator) {
            var n, smallest;
            n = this;

            if (comparator(key, n.key) < 0) {
                if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {
                    n = n.moveRedLeft_();
                }

                n = n.copy(null, null, null, n.left.remove(key, comparator), null);
            } else {
                if (n.left.isRed_()) n = n.rotateRight_();

                if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {
                    n = n.moveRedRight_();
                }

                if (comparator(key, n.key) === 0) {
                    if (n.right.isEmpty()) {
                        return SortedMap.EMPTY_NODE;
                    } else {
                        smallest = n.right.min_();
                        n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
                    }
                }

                n = n.copy(null, null, null, null, n.right.remove(key, comparator));
            }

            return n.fixUp_();
        };

        LLRBNode.prototype.isRed_ = function () {
            return this.color;
        };

        LLRBNode.prototype.fixUp_ = function () {
            var n = this;
            if (n.right.isRed_() && !n.left.isRed_()) n = n.rotateLeft_();
            if (n.left.isRed_() && n.left.left.isRed_()) n = n.rotateRight_();
            if (n.left.isRed_() && n.right.isRed_()) n = n.colorFlip_();
            return n;
        };

        LLRBNode.prototype.moveRedLeft_ = function () {
            var n = this.colorFlip_();

            if (n.right.left.isRed_()) {
                n = n.copy(null, null, null, null, n.right.rotateRight_());
                n = n.rotateLeft_();
                n = n.colorFlip_();
            }

            return n;
        };

        LLRBNode.prototype.moveRedRight_ = function () {
            var n = this.colorFlip_();

            if (n.left.left.isRed_()) {
                n = n.rotateRight_();
                n = n.colorFlip_();
            }

            return n;
        };

        LLRBNode.prototype.rotateLeft_ = function () {
            var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
            return this.right.copy(null, null, this.color, nl, null);
        };

        LLRBNode.prototype.rotateRight_ = function () {
            var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
            return this.left.copy(null, null, this.color, null, nr);
        };

        LLRBNode.prototype.colorFlip_ = function () {
            var left = this.left.copy(null, null, !this.left.color, null, null);
            var right = this.right.copy(null, null, !this.right.color, null, null);
            return this.copy(null, null, !this.color, left, right);
        };

        LLRBNode.prototype.checkMaxDepth_ = function () {
            var blackDepth = this.check_();
            return Math.pow(2.0, blackDepth) <= this.count() + 1;
        };

        LLRBNode.prototype.check_ = function () {
            var blackDepth;

            if (this.isRed_() && this.left.isRed_()) {
                throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');
            }

            if (this.right.isRed_()) {
                throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');
            }

            blackDepth = this.left.check_();

            if (blackDepth !== this.right.check_()) {
                throw new Error('Black depths differ');
            } else {
                return blackDepth + (this.isRed_() ? 0 : 1);
            }
        };

        LLRBNode.RED = true;
        LLRBNode.BLACK = false;
        return LLRBNode;
    }();

    exports.LLRBNode = LLRBNode;

    var LLRBEmptyNode = function () {
        function LLRBEmptyNode() {}

        LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {
            return this;
        };

        LLRBEmptyNode.prototype.insert = function (key, value, comparator) {
            return new LLRBNode(key, value, null);
        };

        LLRBEmptyNode.prototype.remove = function (key, comparator) {
            return this;
        };

        LLRBEmptyNode.prototype.count = function () {
            return 0;
        };

        LLRBEmptyNode.prototype.isEmpty = function () {
            return true;
        };

        LLRBEmptyNode.prototype.inorderTraversal = function (action) {
            return false;
        };

        LLRBEmptyNode.prototype.reverseTraversal = function (action) {
            return false;
        };

        LLRBEmptyNode.prototype.minKey = function () {
            return null;
        };

        LLRBEmptyNode.prototype.maxKey = function () {
            return null;
        };

        LLRBEmptyNode.prototype.check_ = function () {
            return 0;
        };

        LLRBEmptyNode.prototype.isRed_ = function () {
            return false;
        };

        return LLRBEmptyNode;
    }();

    exports.LLRBEmptyNode = LLRBEmptyNode;

    var SortedMap = function () {
        function SortedMap(comparator_, root_) {
            if (root_ === void 0) {
                root_ = SortedMap.EMPTY_NODE;
            }

            this.comparator_ = comparator_;
            this.root_ = root_;
        }

        SortedMap.prototype.insert = function (key, value) {
            return new SortedMap(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
        };

        SortedMap.prototype.remove = function (key) {
            return new SortedMap(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
        };

        SortedMap.prototype.get = function (key) {
            var cmp;
            var node = this.root_;

            while (!node.isEmpty()) {
                cmp = this.comparator_(key, node.key);

                if (cmp === 0) {
                    return node.value;
                } else if (cmp < 0) {
                    node = node.left;
                } else if (cmp > 0) {
                    node = node.right;
                }
            }

            return null;
        };

        SortedMap.prototype.getPredecessorKey = function (key) {
            var cmp,
                node = this.root_,
                rightParent = null;

            while (!node.isEmpty()) {
                cmp = this.comparator_(key, node.key);

                if (cmp === 0) {
                    if (!node.left.isEmpty()) {
                        node = node.left;

                        while (!node.right.isEmpty()) {
                            node = node.right;
                        }

                        return node.key;
                    } else if (rightParent) {
                        return rightParent.key;
                    } else {
                        return null;
                    }
                } else if (cmp < 0) {
                    node = node.left;
                } else if (cmp > 0) {
                    rightParent = node;
                    node = node.right;
                }
            }

            throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');
        };

        SortedMap.prototype.isEmpty = function () {
            return this.root_.isEmpty();
        };

        SortedMap.prototype.count = function () {
            return this.root_.count();
        };

        SortedMap.prototype.minKey = function () {
            return this.root_.minKey();
        };

        SortedMap.prototype.maxKey = function () {
            return this.root_.maxKey();
        };

        SortedMap.prototype.inorderTraversal = function (action) {
            return this.root_.inorderTraversal(action);
        };

        SortedMap.prototype.reverseTraversal = function (action) {
            return this.root_.reverseTraversal(action);
        };

        SortedMap.prototype.getIterator = function (resultGenerator) {
            return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
        };

        SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {
            return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
        };

        SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {
            return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
        };

        SortedMap.prototype.getReverseIterator = function (resultGenerator) {
            return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
        };

        SortedMap.EMPTY_NODE = new LLRBEmptyNode();
        return SortedMap;
    }();

    exports.SortedMap = SortedMap;
});