__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = require(_dependencyMap[0], "react");

  var React = _interopRequireWildcard(_react2);

  var _index = require(_dependencyMap[1], "./../../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/cheapscate7/Documents/React-notes/node_modules/react-native-paper/src/components/SearchBar.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = require(_dependencyMap[2], "react-native");

  var _color = require(_dependencyMap[3], "color");

  var _color2 = _interopRequireDefault(_color);

  var _withTheme = require(_dependencyMap[4], "../core/withTheme");

  var _withTheme2 = _interopRequireDefault(_withTheme);

  var _Icon = require(_dependencyMap[5], "./Icon");

  var _Icon2 = _interopRequireDefault(_Icon);

  var _TouchableIcon = require(_dependencyMap[6], "./TouchableIcon");

  var _TouchableIcon2 = _interopRequireDefault(_TouchableIcon);

  var _Paper = require(_dependencyMap[7], "./Paper");

  var _Paper2 = _interopRequireDefault(_Paper);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    SearchBar: {
      displayName: "SearchBar"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/cheapscate7/Documents/React-notes/node_modules/react-native-paper/src/components/SearchBar.js",
    components: _components,
    locals: [module],
    imports: [React.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var SearchBar = _wrapComponent("SearchBar")(function (_React$Component) {
    _inherits(SearchBar, _React$Component);

    function SearchBar() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, SearchBar);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SearchBar.__proto__ || Object.getPrototypeOf(SearchBar)).call.apply(_ref, [this].concat(args))), _this), _this._handleClearPress = function () {
        _this.props.onChangeText('');
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(SearchBar, [{
      key: "render",
      value: function render() {
        var _props = this.props,
            placeholder = _props.placeholder,
            onIconPress = _props.onIconPress,
            icon = _props.icon,
            value = _props.value,
            theme = _props.theme,
            style = _props.style,
            rest = _objectWithoutProperties(_props, ["placeholder", "onIconPress", "icon", "value", "theme", "style"]);

        var colors = theme.colors,
            roundness = theme.roundness,
            dark = theme.dark;
        var textColor = colors.text;
        var iconColor = dark ? textColor : (0, _color2.default)(textColor).alpha(0.54).rgb().string();
        var rippleColor = (0, _color2.default)(textColor).alpha(0.32).rgb().string();
        return React.createElement(
          _Paper2.default,
          {
            style: [{
              borderRadius: roundness,
              elevation: 4
            }, styles.container, style],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 101
            }
          },
          onIconPress ? React.createElement(_TouchableIcon2.default, {
            borderless: true,
            rippleColor: rippleColor,
            onPress: onIconPress,
            iconStyle: [styles.icon, {
              color: iconColor
            }],
            name: icon || 'search',
            __source: {
              fileName: _jsxFileName,
              lineNumber: 109
            }
          }) : React.createElement(_Icon2.default, {
            style: [styles.icon, {
              color: iconColor
            }],
            name: "search",
            size: 24,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 117
            }
          }),
          React.createElement(_reactNative.TextInput, _extends({
            style: [styles.input, {
              color: textColor
            }],
            placeholder: placeholder || '',
            placeholderTextColor: colors.placeholder,
            selectionColor: colors.primary,
            underlineColorAndroid: "transparent",
            returnKeyType: "search",
            value: value
          }, rest, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 123
            }
          })),
          value ? React.createElement(_TouchableIcon2.default, {
            borderless: true,
            rippleColor: rippleColor,
            onPress: this._handleClearPress,
            iconStyle: [styles.icon, {
              color: iconColor
            }],
            name: "close",
            __source: {
              fileName: _jsxFileName,
              lineNumber: 134
            }
          }) : null
        );
      }
    }]);

    return SearchBar;
  }(React.Component));

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      alignItems: 'center',
      margin: 4
    },
    input: {
      flex: 1,
      fontSize: 18,
      paddingLeft: 8
    },
    icon: {
      margin: 12
    }
  });

  exports.default = (0, _withTheme2.default)(SearchBar);
});