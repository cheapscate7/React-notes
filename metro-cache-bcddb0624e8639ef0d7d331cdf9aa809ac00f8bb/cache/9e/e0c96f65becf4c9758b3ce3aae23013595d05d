__d(function (global, require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = require(_dependencyMap[1], "./../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/Users/cheapscate7/Documents/React-notes/components/Note.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNative = require(_dependencyMap[2], "react-native");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        Note: {
            displayName: "Note"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/Users/cheapscate7/Documents/React-notes/components/Note.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var Note = _wrapComponent("Note")(function (_React$Component) {
        _inherits(Note, _React$Component);

        function Note(props) {
            _classCallCheck(this, Note);

            var _this = _possibleConstructorReturn(this, (Note.__proto__ || Object.getPrototypeOf(Note)).call(this, props));

            _this.state = {
                fontsize: 16
            };
            return _this;
        }

        _createClass(Note, [{
            key: "componentDidMount",
            value: function componentDidMount() {
                var contentLength = this.props.noteContent.split(" ").length;

                if (contentLength > 5 && contentLength <= 10) {
                    this.setState({
                        fontsize: 18
                    });
                } else if (contentLength > 0 && contentLength <= 5) {
                    this.setState({
                        fontsize: 25
                    });
                }
            }
        }, {
            key: "render",
            value: function render() {
                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: noteStyles.note,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 26
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.Text,
                        {
                            style: noteStyles.noteTitle,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 27
                            }
                        },
                        this.props.noteTitle
                    ),
                    _react3.default.createElement(
                        _reactNative.Text,
                        {
                            style: {
                                fontSize: this.state.fontsize
                            },
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 28
                            }
                        },
                        this.props.noteContent
                    )
                );
            }
        }]);

        return Note;
    }(_react3.default.Component));

    var noteStyles = _reactNative.StyleSheet.create({
        note: {
            margin: 5,
            width: 170,
            minHeight: 90,
            maxHeight: 300,
            backgroundColor: "white",
            padding: 5,
            elevation: 1
        },
        noteTitle: {
            fontWeight: "bold",
            fontSize: 16
        },
        noteContent: {
            fontWeight: "100",
            color: "#111111"
        }
    });

    exports.default = Note;
});