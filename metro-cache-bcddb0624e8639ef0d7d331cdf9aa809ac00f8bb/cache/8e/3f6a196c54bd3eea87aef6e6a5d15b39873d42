__d(function (global, require, module, exports, _dependencyMap) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var util_1 = require(_dependencyMap[0], "@firebase/util");

    var Path_1 = require(_dependencyMap[1], "../util/Path");

    var Operation_1 = require(_dependencyMap[2], "./Operation");

    var AckUserWrite = function () {
        function AckUserWrite(path, affectedTree, revert) {
            this.path = path;
            this.affectedTree = affectedTree;
            this.revert = revert;
            this.type = Operation_1.OperationType.ACK_USER_WRITE;
            this.source = Operation_1.OperationSource.User;
        }

        AckUserWrite.prototype.operationForChild = function (childName) {
            if (!this.path.isEmpty()) {
                util_1.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');
                return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);
            } else if (this.affectedTree.value != null) {
                util_1.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');
                return this;
            } else {
                var childTree = this.affectedTree.subtree(new Path_1.Path(childName));
                return new AckUserWrite(Path_1.Path.Empty, childTree, this.revert);
            }
        };

        return AckUserWrite;
    }();

    exports.AckUserWrite = AckUserWrite;
});